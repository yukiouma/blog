<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker部署Kafka集群</title>
    <url>/blog/2022/05/24/Docker%E9%83%A8%E7%BD%B2Kafka%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><span id="more"></span>  

<p>下载docker-compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<p>设置docker-compose为可执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/zookeeper</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/playground/kafka/data/zookeeper/data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/playground/kafka/data/zookeeper/datalog:/datalog</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/playground/kafka/data/zookeeper/logs:/logs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">kafka1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9092</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_BROKER_ID:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.200</span><span class="string">:2181</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://192.168.1.200:9092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENERS:</span> <span class="string">PLAINTEXT://0.0.0.0:9092</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_DIRS:</span> <span class="string">/data/kafka-data</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_RETENTION_HOURS:</span> <span class="number">24</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/playground/kafka/data/kafka1/data:/data/kafka-data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span>  </span><br><span class="line">  <span class="attr">kafka2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9093</span><span class="string">:9093</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_BROKER_ID:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.200</span><span class="string">:2181</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://192.168.1.200:9093</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENERS:</span> <span class="string">PLAINTEXT://0.0.0.0:9093</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_DIRS:</span> <span class="string">/data/kafka-data</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_RETENTION_HOURS:</span> <span class="number">24</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/playground/kafka/data/kafka2/data:/data/kafka-data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  <span class="attr">kafka3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9094</span><span class="string">:9094</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_BROKER_ID:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.200</span><span class="string">:2181</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://192.168.1.200:9094</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENERS:</span> <span class="string">PLAINTEXT://0.0.0.0:9094</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_DIRS:</span> <span class="string">/data/kafka-data</span></span><br><span class="line">      <span class="attr">KAFKA_LOG_RETENTION_HOURS:</span> <span class="number">24</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/playground/kafka/data/kafka3/data:/data/kafka-data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>

<p>注意：yaml中的ip为虚拟机的局域网ip</p>
<h2 id="部署kafka集群"><a href="#部署kafka集群" class="headerlink" title="部署kafka集群"></a>部署kafka集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>



<p>查看部署结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@playground kafka]<span class="comment"># docker-compose ps</span></span><br><span class="line">  Name                 Command               State                         Ports                       </span><br><span class="line">-------------------------------------------------------------------------------------------------------</span><br><span class="line">kafka1      start-kafka.sh                   Up      0.0.0.0:9092-&gt;9092/tcp                            </span><br><span class="line">kafka2      start-kafka.sh                   Up      0.0.0.0:9093-&gt;9093/tcp                            </span><br><span class="line">kafka3      start-kafka.sh                   Up      0.0.0.0:9094-&gt;9094/tcp                            </span><br><span class="line">zookeeper   /bin/sh -c /usr/sbin/sshd  ...   Up      0.0.0.0:2181-&gt;2181/tcp, 22/tcp, 2888/tcp, 3888/tcp</span><br></pre></td></tr></table></figure>

<p>可以查看到zookeeper以及三个kafka的容器成功运行即可</p>
<h2 id="测试集群可用性"><a href="#测试集群可用性" class="headerlink" title="测试集群可用性"></a>测试集群可用性</h2><h3 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h3><p>进入容器kafka1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it kafka1 /bin/sh</span><br></pre></td></tr></table></figure>

<p>创建主题yuki，三分区两副本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/kafka/bin/kafka-topics.sh --create --topic yuki --zookeeper 192.168.1.200:2181 --partitions 3 --replication-factor 2</span><br></pre></td></tr></table></figure>

<p>查看主题列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/kafka/bin/kafka-topics.sh --list --zookeeper 192.168.1.200:2181</span><br></pre></td></tr></table></figure>

<p>查看主题详情</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/kafka/bin/kafka-topics.sh --describe --topic yuki --zookeeper 192.168.1.200:2181</span><br></pre></td></tr></table></figure>



<h3 id="开启生产者与消费者"><a href="#开启生产者与消费者" class="headerlink" title="开启生产者与消费者"></a>开启生产者与消费者</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>进入容器kafka1，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/kafka/bin/kafka-console-producer.sh --topic yuki --broker-list 192.168.1.200:9092</span><br></pre></td></tr></table></figure>



<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>打开另一个ssh，进入kafka2，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/kafka/bin/kafka-console-consumer.sh --topic yuki --bootstrap-server 192.168.1.200:9092 --from-beginning</span><br></pre></td></tr></table></figure>

<p>若此时在两端的console中消费者能及时消费生产者产生的数据说明集群搭建成功</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署RedisCluster</title>
    <url>/blog/2022/05/24/Docker%E9%83%A8%E7%BD%B2RedisCluster/</url>
    <content><![CDATA[<h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><span id="more"></span>

<h3 id="Config-and-Data-Volumn"><a href="#Config-and-Data-Volumn" class="headerlink" title="Config and Data Volumn"></a>Config and Data Volumn</h3><p>在宿主机上准备redis配置文件以及挂载的数据卷的目录，结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@playground redis]<span class="comment"># tree .</span></span><br><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── redis-6371</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── redis.conf</span><br><span class="line">│   └── data</span><br><span class="line">├── redis-6372</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── redis.conf</span><br><span class="line">│   └── data</span><br><span class="line">├── redis-6373</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── redis.conf</span><br><span class="line">│   └── data</span><br><span class="line">├── redis-6374</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── redis.conf</span><br><span class="line">│   └── data</span><br><span class="line">├── redis-6375</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── redis.conf</span><br><span class="line">│   └── data</span><br><span class="line">└── redis-6376</span><br><span class="line">    ├── conf</span><br><span class="line">    │   └── redis.conf</span><br><span class="line">    └── data</span><br></pre></td></tr></table></figure>

<p>说明</p>
<ul>
<li><p><code>redis-&lt;端口号&gt;/conf/redis.conf</code>是redis实例启动的配置文件，内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port &lt;实例暴露端口号，如6379&gt;</span><br><span class="line">requirepass 1234</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize no</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">cluster-enabled <span class="built_in">yes</span> </span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip  &lt;宿主机ip, 如192.168.1.200&gt;</span><br><span class="line">cluster-announce-port &lt;实例暴露端口号，如6379&gt;</span><br><span class="line">cluster-announce-bus-port &lt;实例暴露端口号 + 10000，如16379&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>redis-&lt;端口号&gt;/data</code>是redis持久化的数据卷</p>
</li>
</ul>
<h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>用来启动多个redis实例以及映射配置文件与数据卷</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis-6371:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-6371</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> </span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6371/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6371/data:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6371</span><span class="string">:6371</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16371</span><span class="string">:16371</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-6372:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-6372</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6372/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6372/data:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6372</span><span class="string">:6372</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16372</span><span class="string">:16372</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-6373:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-6373</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6373/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6373/data:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6373</span><span class="string">:6373</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16373</span><span class="string">:16373</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">redis-6374:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-6374</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6374/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6374/data:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6374</span><span class="string">:6374</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16374</span><span class="string">:16374</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-6375:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-6375</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6375/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6375/data:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6375</span><span class="string">:6375</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16375</span><span class="string">:16375</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-6376:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-6376</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6376/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis-6376/data:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6376</span><span class="string">:6376</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16376</span><span class="string">:16376</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure>



<h2 id="Initialize-Redis-Instance"><a href="#Initialize-Redis-Instance" class="headerlink" title="Initialize Redis Instance"></a>Initialize Redis Instance</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;directory of your docker-compose file&gt;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>检查实例是否启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@playground redis]<span class="comment"># docker-compose ps</span></span><br><span class="line">   Name                 Command               State                             Ports                           </span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">redis-6371   docker-entrypoint.sh redis ...   Up      0.0.0.0:16371-&gt;16371/tcp, 0.0.0.0:6371-&gt;6371/tcp, 6379/tcp</span><br><span class="line">redis-6372   docker-entrypoint.sh redis ...   Up      0.0.0.0:16372-&gt;16372/tcp, 0.0.0.0:6372-&gt;6372/tcp, 6379/tcp</span><br><span class="line">redis-6373   docker-entrypoint.sh redis ...   Up      0.0.0.0:16373-&gt;16373/tcp, 0.0.0.0:6373-&gt;6373/tcp, 6379/tcp</span><br><span class="line">redis-6374   docker-entrypoint.sh redis ...   Up      0.0.0.0:16374-&gt;16374/tcp, 0.0.0.0:6374-&gt;6374/tcp, 6379/tcp</span><br><span class="line">redis-6375   docker-entrypoint.sh redis ...   Up      0.0.0.0:16375-&gt;16375/tcp, 0.0.0.0:6375-&gt;6375/tcp, 6379/tcp</span><br><span class="line">redis-6376   docker-entrypoint.sh redis ...   Up      0.0.0.0:16376-&gt;16376/tcp, 0.0.0.0:6376-&gt;6376/tcp, 6379/tcp</span><br></pre></td></tr></table></figure>



<h2 id="Start-Cluster"><a href="#Start-Cluster" class="headerlink" title="Start Cluster"></a>Start Cluster</h2><p>进入任意一个实例中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-6371 /bin/sh</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -a 1234 --cluster create 192.168.1.200:6371 192.168.1.200:6372 192.168.1.200:6373 192.168.1.200:6374 192.168.1.200:6375 192.168.1.200:6376 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli -a 1234 --cluster create 192.168.1.200:6371 192.168.1.200:6372 192.168.1.200:6373 192.168.1.200:6374 192.168.1.200:6375 192.168.1.200:6376 --cluster-replicas 1</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.1.200:6375 to 192.168.1.200:6371</span><br><span class="line">Adding replica 192.168.1.200:6376 to 192.168.1.200:6372</span><br><span class="line">Adding replica 192.168.1.200:6374 to 192.168.1.200:6373</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: b0e9b492aa43fef1970aa8e3ca66f59ef3fb3097 192.168.1.200:6371</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 77ef976879816a2b600173bef8da8fb75ea0eaaf 192.168.1.200:6372</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 9ccf171a890134c2589b7170399a0cf10a5e4227 192.168.1.200:6373</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 7b6c90ddf3d63c06063ac34c97a95da72008ca81 192.168.1.200:6374</span><br><span class="line">   replicates 9ccf171a890134c2589b7170399a0cf10a5e4227</span><br><span class="line">S: df88347e5ba5c8e74306d6801deb1282f11de837 192.168.1.200:6375</span><br><span class="line">   replicates b0e9b492aa43fef1970aa8e3ca66f59ef3fb3097</span><br><span class="line">S: 942b16d7717822ee6776e38d9b15e04f6f7cf149 192.168.1.200:6376</span><br><span class="line">   replicates 77ef976879816a2b600173bef8da8fb75ea0eaaf</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): <span class="built_in">yes</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.200:6371)</span><br><span class="line">M: b0e9b492aa43fef1970aa8e3ca66f59ef3fb3097 192.168.1.200:6371</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 7b6c90ddf3d63c06063ac34c97a95da72008ca81 192.168.1.200:6374</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9ccf171a890134c2589b7170399a0cf10a5e4227</span><br><span class="line">S: 942b16d7717822ee6776e38d9b15e04f6f7cf149 192.168.1.200:6376</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 77ef976879816a2b600173bef8da8fb75ea0eaaf</span><br><span class="line">M: 77ef976879816a2b600173bef8da8fb75ea0eaaf 192.168.1.200:6372</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 9ccf171a890134c2589b7170399a0cf10a5e4227 192.168.1.200:6373</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: df88347e5ba5c8e74306d6801deb1282f11de837 192.168.1.200:6375</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b0e9b492aa43fef1970aa8e3ca66f59ef3fb3097</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<p>可以看到，redis cluster配置为三主三从，配置完成</p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>进入6371的redis-cli</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-6371 redis-cli -c -h localhost -p 6371 --pass 1234</span><br></pre></td></tr></table></figure>

<p>SET一个值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost:6371&gt; SET A 123</span><br><span class="line">-&gt; Redirected to slot [6373] located at 192.168.1.200:6372</span><br><span class="line">OK</span><br><span class="line">(63.16s)</span><br></pre></td></tr></table></figure>

<p>重定向到了6372…..并且值成功设置到了6372节点</p>
<p>进入6374的redis-cli</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-6374 redis-cli -c -h localhost -p 6374 --pass 1234</span><br></pre></td></tr></table></figure>

<p>GET刚刚设置的A</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost:6374&gt; GET A</span><br><span class="line">-&gt; Redirected to slot [6373] located at 192.168.1.200:6372</span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure>

<p>重定向到了6372…..并且获取到了刚刚SET进入的A</p>
<p>至此redis cluster搭建与测试完成</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Git安装</title>
    <url>/blog/2021/06/07/Git%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>VMware® Workstation 15 Pro - 15.5.0 build-14665864</li>
<li>宿主机： Windows 10, 64-bit  (Build 19042) 10.0.19042</li>
<li>CentOS Linux release 7.9.2009 (Core)</li>
</ul>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure>



<h3 id="安装编译组件"><a href="#安装编译组件" class="headerlink" title="安装编译组件"></a>安装编译组件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y curl-devel</span><br><span class="line">yum install -y gcc-c++</span><br><span class="line">yum install -y zlib-devel perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>



<h3 id="下载解压git"><a href="#下载解压git" class="headerlink" title="下载解压git"></a>下载解压git</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/packages</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.0.tar.gz</span><br><span class="line">cd /opt/modules</span><br><span class="line">tar -C . -zxvf ../packages/git-2.9.0.tar.gz</span><br></pre></td></tr></table></figure>



<h3 id="编译部署"><a href="#编译部署" class="headerlink" title="编译部署"></a>编译部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/modules/git-2.9.0/</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>



<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git version 2.9.0</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang安装</title>
    <url>/blog/2021/05/23/Golang%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在CentOS7中部署Golang开发环境</p>
<p><strong>注意</strong>: Go的安装路径一定要在&#x2F;usr&#x2F;local，否在在vsc上安装Go插件时会导致找不到编译器。。。</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>CentOS Linux release 7.7.1908 (Core)</li>
<li>go version go1.16.3 linux&#x2F;amd64</li>
</ul>
<h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line"></span><br><span class="line">sudo tar -C . -zxvf /mnt/d/SoftwarePackages/Golang/go1.16.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi ~/.bashrc</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/home/yuki/packages/go/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>



<h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go version go1.16.3 linux/amd64</span><br></pre></td></tr></table></figure>



<h2 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h2><p>主要是开启Go Module以及将镜像设置为优先从阿里云或者微软源下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://mirrors.aliyun.com/goproxy,https://goproxy.io,direct</span><br></pre></td></tr></table></figure>





<h2 id="Vscode插件"><a href="#Vscode插件" class="headerlink" title="Vscode插件"></a>Vscode插件</h2><p>Go</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>reference: <a href="https://github.com/golang/vscode-go/blob/master/docs/debugging.md#installation">https://github.com/golang/vscode-go/blob/master/docs/debugging.md#installation</a></p>
<p>use Delve</p>
<p>in vscode:</p>
<ul>
<li>Ctrl+Shift+P</li>
<li>select <a href="https://github.com/golang/vscode-go/blob/master/docs/settings.md#go-installupdate-tools"><code>Go: Install/Update Tools</code></a>, and select <a href="https://github.com/golang/vscode-go/blob/master/docs/tools.md#dlv"><code>dlv</code></a>.</li>
<li>install</li>
</ul>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中数组和切片中的一些小技巧</title>
    <url>/blog/2021/10/28/Go%E4%B8%AD%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://books.studygolang.com/advanced-go-programming-book/ch1-basic/ch1-03-array-string-and-slice.html">Go语言高级编程(Advanced Go Programming)</a></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol>
<li><p>Go中的数组是一个完整的值而不是指向数组头部元素的指针，所以一个数组遍历被复制或者被传递的时候是会复制整个数组，数组较大的时候复制和赋值的开销也会较大。为了避免复制数组带来的开销，可以传递一个指向数组的指针，但是数组指针并不是数组。 </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	b := &amp;a</span><br><span class="line">	fmt.Println(b[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>
<ol start="2">
<li><p>一个长度为0的数组，实际上对内存的占用也会是0，因此我们可以通过下面的方式，来实现没有付出额外的内存代价，进行了快速的迭代操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> times [<span class="number">5</span>][<span class="number">0</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> <span class="keyword">range</span> times &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;hi~&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的一段代码声明了一个长度为5，每个元素都是一个空数组的数组，该数组内的每个元素对于内存的占用都是0</p>
</li>
<li><p>我们可以通过声明接口数组，来将不同类型的数组都放入数组内</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> element = [...]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="number">123</span>, <span class="string">&quot;hello world&quot;</span>, time.Now()&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> element &#123;</span><br><span class="line">		fmt.Println(v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ol>
<li><p>在尾部追加元素</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	times := [<span class="number">5</span>][<span class="number">0</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> <span class="keyword">range</span> times &#123;</span><br><span class="line">		a = <span class="built_in">append</span>(a, <span class="type">int</span>(time.Now().Unix()))</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>在头部追加元素</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	times := [<span class="number">5</span>][<span class="number">0</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> <span class="keyword">range</span> times &#123;</span><br><span class="line">		a = <span class="built_in">append</span>([]<span class="type">int</span>&#123;<span class="type">int</span>(time.Now().Unix())&#125;, a...)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在头部追加元素会导致内存的重新分配，导致已有的元素全部复制一次，因此头部追加的操作性能一般比尾部追加的操作要差</p>
</li>
<li><p>使用copy和append配合可以避免创建中间的临时切片，完成添加元素的操作</p>
<p>比如我们需要在切片中间的第i个未知上追加新的内容</p>
<p>使用append链式操作，这种情况下会有创建临时切片</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">	a = <span class="built_in">append</span>(a, []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;...)</span><br><span class="line">	<span class="comment">// 在第3位中插入一个99</span></span><br><span class="line">	a = <span class="built_in">append</span>(a[:<span class="number">3</span>], <span class="built_in">append</span>([]<span class="type">int</span>&#123;<span class="number">99</span>&#125;, a[<span class="number">3</span>:]...)...)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用append配合从copy操作，我们就可以避免临时切片的创建</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">	a = <span class="built_in">append</span>(a, []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;...)</span><br><span class="line">	<span class="comment">// 在第3位中插入一个99</span></span><br><span class="line">	a = <span class="built_in">append</span>(a, <span class="number">0</span>)</span><br><span class="line">	<span class="built_in">copy</span>(a[<span class="number">3</span>+<span class="number">1</span>:], a[<span class="number">3</span>:])</span><br><span class="line">	a[<span class="number">3</span>] = <span class="number">99</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先在a后面追加一个元素0，然后将第3为后面的元素全部往后移动一位，此时切片值为[1， 2， 3， 4， 4， 5]，最后再替换掉第三位的4变为99</p>
</li>
<li><p>切片元素的删除</p>
<p>从尾部位置删除，直接修改指针中的len即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]   <span class="comment">// 删除尾部1个元素</span></span><br><span class="line">a = a[:<span class="built_in">len</span>(a)-N]   <span class="comment">// 删除尾部N个元素</span></span><br></pre></td></tr></table></figure>



<p>从头部位置删除，则有两种操作方法：</p>
<p>移动数据指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = a[<span class="number">1</span>:] <span class="comment">// 删除开头1个元素</span></span><br><span class="line">a = a[N:] <span class="comment">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure>

<p>不移动指针，使用append或者copy原地完成</p>
<p>使用append</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = <span class="built_in">append</span>(a[:<span class="number">0</span>], a[<span class="number">1</span>:]...) <span class="comment">// 删除开头1个元素</span></span><br><span class="line">a = <span class="built_in">append</span>(a[:<span class="number">0</span>], a[N:]...) <span class="comment">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure>

<p>使用copy</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = a[:<span class="built_in">copy</span>(a, a[<span class="number">1</span>:])] <span class="comment">// 删除开头1个元素</span></span><br><span class="line">a = a[:<span class="built_in">copy</span>(a, a[N:])] <span class="comment">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure>

<p> 对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用<code>append</code>或<code>copy</code>原地完成 </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...&#125;</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">append</span>(a[:i], a[i+<span class="number">1</span>:]...) <span class="comment">// 删除中间1个元素</span></span><br><span class="line">a = <span class="built_in">append</span>(a[:i], a[i+N:]...) <span class="comment">// 删除中间N个元素</span></span><br><span class="line"></span><br><span class="line">a = a[:i+<span class="built_in">copy</span>(a[i:], a[i+<span class="number">1</span>:])]  <span class="comment">// 删除中间1个元素</span></span><br><span class="line">a = a[:i+<span class="built_in">copy</span>(a[i:], a[i+N:])]  <span class="comment">// 删除中间N个元素</span></span><br></pre></td></tr></table></figure>




</li>
<li><p>避免切片内存泄漏</p>
<p>切片操作不会复制底层的数据，底层的数据会被保存再内存中，直到它不再被引用。但有时候很可能因为一个小的内存引用导致整个底层的数组处于被使用的状态，这回导致GC延迟对该底层数组的回收</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">extract</span><span class="params">()</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		a = <span class="built_in">append</span>(a, i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a[:<span class="number">10</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义了个方法，方法内先生成了一个元素从0到99的切片，然后我们截取切片前10个元素返回。切片的底层是0-99共99个元素，由于返回的是该切片的指针，返回时底层数组仍然处于被该指针引用的状态，因此离开该函数时这100个底层元素都无法被GC马上回收，造成了内存泄漏</p>
<p>为了修复这个问题，我们应该采取以下方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">extract</span><span class="params">()</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		a = <span class="built_in">append</span>(a, i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, a[:<span class="number">10</span>]...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们将底层的10个元素复制过来，形成一个新的切片，然后返回新的切片。新的切片底层只有10个元素，然后函数结束后，原先的100个元素的切片因为丢失了引用，因此回马上被GC回收</p>
<p>在删除切片内元素的时候同意会遇到类似的问题</p>
<p>比如我们移除尾部的元素的时候</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a []*<span class="type">int</span>&#123; ... &#125;</span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]    </span><br></pre></td></tr></table></figure>

<p>被删除的最后一个元素依然被引用, 可能导致GC操作被阻碍，我们可以在完成操前，将需要移除的尾部元素设置为nil，然后再执行操作，这样可以保证GC发现需要回收的对象</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a []*<span class="type">int</span>&#123; ... &#125;</span><br><span class="line">a[<span class="built_in">len</span>(a)<span class="number">-1</span>] = <span class="literal">nil</span> <span class="comment">// GC回收最后一个元素内存</span></span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]  <span class="comment">// 从切片删除最后一个元素</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go并发编程笔记</title>
    <url>/blog/2022/02/11/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li><p>轻量，可大量创建，以并发的特性去执行</p>
</li>
<li><p>main函数就是作为goroutine执行的，是主goroutine，当该goroutine退出后，它派生的所有goroutine将被强制退出</p>
</li>
<li><p>OS调度线程到可用的处理器上运行</p>
</li>
<li><p>Go runtime调度goroutine在绑定到单个OS线程的逻辑处理器（一般简称为P）的队列上，最终各个线程到队列中获取一个goroutine去执行</p>
</li>
</ul>
<span id="more"></span>  

<blockquote>
<p>补充：并发与并行的概念</p>
<ul>
<li>并发：可以处理多个任务，无需等待上一个任务处理完在执行下一个任务，但不需要是同时处理</li>
<li>并行：不同的任务在不同的CPU核心上同时进行处理</li>
</ul>
</blockquote>
<h2 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h2><ul>
<li><p>让方法的调用者决定是否并发</p>
<p>调用者来决定是否并发，意味着调用者可以随时销毁该goroutine，减少内存泄漏的问题</p>
</li>
<li><p>永远不要开启一个你不知道什么时候会结束的goroutine</p>
<ul>
<li>开启的goroutine什么时候会结束</li>
<li>你有没有办法让他结束</li>
</ul>
</li>
<li><p>数据的发送者才可以决定channel什么时候可以关闭</p>
</li>
<li><p>要注意channel关闭不能有二义性</p>
<p>要区分channel关闭是由于数据被消费完成了，还是因为出现了错误导致的channel关闭</p>
</li>
</ul>
<h2 id="并发例子"><a href="#并发例子" class="headerlink" title="并发例子"></a>并发例子</h2><ul>
<li><p>内存泄露</p>
<p>由于unbuffered channel里的数据没有人去获取而导致goroutine被阻塞</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> result)</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Duration(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(term <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    record, err := search(term)</span><br><span class="line">    ch &lt;- result&#123;record, err&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    	<span class="keyword">return</span> errors.New(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> result := &lt;-ch:</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码，由于创建的channel是unbuffered channel，由于context超时比search函数的运行时间短，因此select会因为超时直接退出。当main goroutine还在运行时，上面的goroutine就会因为channel的值没有被获取和一直被阻塞无法被销毁，造成内存写漏</p>
<p>改进办法：</p>
<p>把channel改为带缓存的channel即可</p>
</li>
<li><p>埋点上报事件丢失</p>
<p>埋点上报事件相对业务而言，一般属于旁路逻辑，为了避免阻塞主干业务逻辑，一般会开启一个goroutine单独去执行，如下面的例子所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span></span> Handle(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">    <span class="keyword">go</span> a.Track.Event(<span class="string">&quot;this event&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题分析：</p>
<p>上报事件的goroutine的生命周期没有被管理起来，因此，当应用的main goroutine因意外停止时，这些正在上报的goroutine可能会被强行直接退出，导致上报事件的丢失</p>
<p>改进：</p>
<ol>
<li><p>使用WaitGroup，保证上报事件全部结束之后在关闭</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Tracker <span class="keyword">struct</span> &#123;</span><br><span class="line">    wg sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tracker)</span></span> Event(data <span class="type">string</span>) &#123;</span><br><span class="line">    t.wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> t.wg.Done()</span><br><span class="line">        <span class="comment">// 上报事件逻辑</span></span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tracker)</span></span> Shutdown() &#123;</span><br><span class="line">    t.wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a App</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先等待应用服务全部终止</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保证等待所有的上报事件的goroutine全部结束后再退出main goroutine</span></span><br><span class="line">    a.Track.Shutdown()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个做法可以保证所有上报事件都结束之后再退出进程，但还存在以下问题</p>
<ul>
<li>会大量创建goroutine，其实不是比较理想的工作模型</li>
<li>其次，如果上报时间特别长，有可能会导致对外的服务虽然停止了，但是main函数却永远都无法退出</li>
</ul>
</li>
<li><p>使用channel，只是启动少量的goroutine去消费channel里面的数据，并使用context的超时功能，解决方案1中可能无法退出main函数的问题</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Tracker <span class="keyword">struct</span> &#123;</span><br><span class="line">    ch <span class="keyword">chan</span> <span class="type">string</span></span><br><span class="line">    stop <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTracker</span><span class="params">()</span></span> *Tracker &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Tracker&#123;</span><br><span class="line">        ch: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tracker)</span></span> Event(ctx context.Context, data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> t.ch &lt;- data:</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        	<span class="keyword">return</span> ctx.Err()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tracker)</span></span> Run() &#123;</span><br><span class="line">    <span class="keyword">for</span> data := <span class="keyword">range</span> t.ch &#123;</span><br><span class="line">        <span class="comment">// 上报逻辑</span></span><br><span class="line">	&#125;</span><br><span class="line">    t.stop &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tracker)</span></span> Shutdown(ctx context.Context) &#123;</span><br><span class="line">    <span class="built_in">close</span>(t.ch)</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;- t.stop:</span><br><span class="line">        <span class="keyword">case</span> &lt;- ctx.Done():</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tr := NewTracker()</span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    <span class="keyword">go</span> tr.Run()</span><br><span class="line">    <span class="comment">// 对外服务的上报事件</span></span><br><span class="line">    _ = tr.Event(ctx, <span class="string">&quot;test1&quot;</span>)</span><br><span class="line">    _ = tr.Event(ctx, <span class="string">&quot;test2&quot;</span>)</span><br><span class="line">    _ = tr.Event(ctx, <span class="string">&quot;test3&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    ctx, cancel := context.WithDeadline(ctx, time.Now().Add(<span class="number">5</span>*time.Second))</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line">    tr.Shutdown(ctx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的改进方法，使用了两个channel：</p>
<ul>
<li><p>一个buffered channel来负责接受上报数据，然后启用一个goroutine不断消费该channel里面堆积的上报数据</p>
</li>
<li><p>一个unbuffered channel负责等待上报组件被停止与退出</p>
<p>通过这两个channel，避免了每个上报事件都要单独创建goroutine这种大量创建goroutine的事件。同时主动管理了消费数据的goroutine，使得我们可以掌握该goroutine的生命周期</p>
</li>
<li><p>使用一个超时context来保证当对外服务停止时，上报事件的服务可以在指定时间内退出</p>
</li>
</ul>
<p>流程分析：</p>
<ul>
<li>启动一个消费channel数据的goroutine(<code>go tr.Run()</code>)</li>
<li>产生消费数据</li>
<li>当应用停止时，创建一个超时context，使用该context来调用tracker的停止方法</li>
<li>关闭tracker的方法中关闭channel通道，并向stop通道发送一个信号，此时，消费数据的方法已经被正常退出</li>
<li>当收到stop通道的信号或者context超时，停止tracker的方法也可以被正常退出</li>
<li>main函数退出</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h2><p>同时开启多个监听不同端口的应用时，我们应该做到，当一个应用因为意外退出时，其它应用应该同时被终止，以便开发者能及时知道应用出现问题</p>
<p>对于应用级别的服务管理，一般会抽象一个application lifecycle的管理，方便服务启动与停止，一般包括如下内容：</p>
<ul>
<li>应用信息的注册</li>
<li>服务的启动&#x2F;停止</li>
<li>信号注册</li>
<li>服务注册</li>
</ul>
<h1 id="Memory-Model"><a href="#Memory-Model" class="headerlink" title="Memory Model"></a>Memory Model</h1><p><a href="https://go.dev/ref/mem">Go内存模型官方指南</a></p>
<ul>
<li><p>如何保证一个goroutine中看到另一个goroutine修改了变量的值？</p>
<p>如果程序中修改数据时有其它的goroutine同时读取，那么必须将读取串行化，请使用channel或者其它的同步原语，如sync或者sync&#x2F;atomic来保护数据</p>
</li>
</ul>
<h2 id="Happen-Before"><a href="#Happen-Before" class="headerlink" title="Happen-Before"></a>Happen-Before</h2><p>在一个goroutine中，读写一定是按照程序中的顺序来执行的。即编译器和处理器只有在不会改变这个goroutine的行为时才可以修改读写的执行顺序，这种现象称为重排（memory reordering）。</p>
<p>  由于重排，不同的goroutine可能会看到不同的执行顺序，例如：</p>
<blockquote>
<p>goroutine 1: 执行了a &#x3D; 1; b &#x3D; 2</p>
</blockquote>
<p>  由于a和b之间没有相互影响，因此对于该goroutine来说，先执行b &#x3D; 2还是a &#x3D; 1都是被允许的，因此，我们无法预测它们的执行顺序</p>
<p>  如果此时我们的goroutine b中有某些逻辑，是强依赖先更新a再更新b的这种逻辑的话，就有可能会出错，因为重排，它可能会看到b比a先更新</p>
<blockquote>
<p>定义一个变量v，一个读操作r，一个写操作w</p>
<p>当下面条件满足时，对v的r是<em><strong>被允许</strong></em>看到对v的w：</p>
<ul>
<li><p>r不先行发生于w</p>
</li>
<li><p>在w后r前没有其它的对v的写操作</p>
</li>
</ul>
<p>当下列条件满足时，<em><strong>保证</strong></em>v的r看到其w：</p>
<ul>
<li><p>w先行发生于r</p>
</li>
<li><p>其它对v的写操作一定要在w前，或者r后</p>
</li>
</ul>
<p>对于变量v的零值初始化在内存模型中表现得与写操作相同</p>
<p>对大于single machine word的变量的读写操作表现得像以<em><strong>不确定顺序对多个single machine word变量</strong></em>的操作</p>
<blockquote>
<p>什么是Single Machine World？<strong>中文翻译过来就是机器字。机器字的概念就是系统单次能处理的最小的数据容量。比如64位的操作系统，这就意味着我的机器字是8Byte,也就是说单次能处理的最大的数据容量是</strong>8Byte，可以利用这点来进行原子赋值操作。</p>
</blockquote>
</blockquote>
<h2 id="Memory-Reordering"><a href="#Memory-Reordering" class="headerlink" title="Memory Reordering"></a>Memory Reordering</h2><p>在不改变用户语义的前提下，当高级语言被编译为汇编代码的时候，会进行各种各样的优化，有处理器重排和编译器重排等，比如</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="built_in">println</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码，按用户编写的逻辑需要做100次x的相同的赋值操作</p>
<p>编译器有可能会将其优化成下面的样子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">    <span class="built_in">println</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为x每次赋值都是相同的，因此编译器会处于性能优化的考虑将x的相同赋值行为从循环结构中提取出来，因为不会影响原语义。</p>
<p>在多核心的场景下，我们是不能轻易判断两个程序是等价的</p>
<ul>
<li><p>每个CPU核心都有自己的不同级别的cache来抚平内存与磁盘读写效率的差异</p>
<p>如果没有锁机制的保护的话，一个核心更新一个变量的时候，可能结果只是停留在某一个级别的缓存当中，当另一个核心需要使用到同一个变量的时候，可能会因赋值结果还在核心缓存中没有及时刷盘落入内存中，导致读不到最新的值，从而引发不可预期的结果</p>
</li>
</ul>
<h1 id="Package-Sync"><a href="#Package-Sync" class="headerlink" title="Package Sync"></a>Package Sync</h1><h2 id="Data-Race"><a href="#Data-Race" class="headerlink" title="Data Race"></a>Data Race</h2><p>data race是两个及以上的goroutine访问同一个资源（变量或者数据结构），并尝试对该资源进行读写儿不考虑其它的goroutine</p>
<blockquote>
<p>go自带的data race检测方案：race detector</p>
<p>go build -race</p>
<p>go test -race</p>
<p>注意，使用race detecto时，当出现了data race会让进程停止，不建议生产环境使用</p>
</blockquote>
<p>我们要尽量避免对go原生的一些数据结构（map, slice, interface）去做假设</p>
<ul>
<li><p>interface的底层由两个machine word的值组成：type和data</p>
<p>当我们在data race的情况下给interface赋值，有可能会导致一种情况，type被更改了，但是里面指向的data还没有进行更改这种以外状况，甚至有可能引发panic</p>
</li>
</ul>
<h2 id="sync-atomic"><a href="#sync-atomic" class="headerlink" title="sync.atomic"></a>sync.atomic</h2><p>在读多写少的场景，特别是读特别多的场景，atomic.Value的性能甚至比读写锁的性能更好</p>
<p>不过主要还是需要进行benchmark进行测试来决定使用读写锁还是atomic.Value</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench=.</span><br></pre></td></tr></table></figure>

<p>atomic.Value的实现原理使用的是COW(copy-on-write)</p>
<h3 id="COW"><a href="#COW" class="headerlink" title="COW"></a>COW</h3><p>copy-on-write，写时拷贝，是计算机程序设计领域的一种优化策略，其核心思想是，当有多个调用者都需要请求相同资源时，一开始资源只会有一份，多个调用者共同读取这一份资源，当某个调用者需要修改数据的时候，才会分配一块内存，将数据拷贝过去，供这个调用者使用，而其他调用者依然还是读取最原始的那份数据。每次有调用者需要修改数据时，就会重复一次拷贝流程，供调用者修改使用。</p>
<p><a href="https://cllc.fun/2020/03/16/linux-copy-on-write/">Copy-On-Write原理简述</a></p>
<blockquote>
<p>在fork()调用之后，只会给子进程分配虚拟内存地址，而父子进程的虚拟内存地址虽然不同，但是映射到物理内存上都是同一块区域，子进程的代码段、数据段、堆栈都是指向父进程的物理空间。</p>
<p>并且此时父进程中所有对应的内存页都会被标记为只读，父子进程都可以正常读取内存数据，当其中某个进程需要更新数据时，检测到内存页是read-only的，内存管理单元（MMU）便会抛出一个页面异常中断，（page-fault），在处理异常时，内核便会把触发异常的内存页拷贝一份（其他内存页还是共享的一份），让父子进程各自持有一份。</p>
<p>这样做的好处不言而喻，能极大的提高fork操作时的效率，但是坏处是，如果fork之后，两个进程各自频繁的更新数据，则会导致大量的分页错误，这样就得不偿失了。</p>
</blockquote>
<p>Copy-On-Write是redis的BGSAVE指令实现的基本原理</p>
<p>Copy-On-Write在服务降级以及本地缓存的场景也会经常用到</p>
<h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><p>在Go1.8版本之前</p>
<blockquote>
<p>假设有两个goroutine，分别成为g1和g2</p>
<p>g1采取先上锁，然会休眠100毫秒，再释放锁的模式</p>
<p>g2采取先休眠100毫秒，再上锁，然后马上释放锁的模式</p>
<p>测是两个锁进行竞争的时候，g1获取到锁的概率，远远大于g2</p>
</blockquote>
<p>造成上面这个案例的结果的原因是：</p>
<blockquote>
<p>g1在获取到并持有锁时，g2会被放入等待队列中，等待g1释放锁后，go的scheduler将g2标记为可运行，然后再重新去竞争锁。但是，go的scheduler去标记（唤醒）g2的时候，很可能锁又再次被g1持有了，然后g2不得不再次回到等待队列等待scheduler再次唤醒，因此造成g2比g1难获得锁的情况</p>
</blockquote>
<h3 id="实现模型"><a href="#实现模型" class="headerlink" title="实现模型"></a>实现模型</h3><ul>
<li><p>Barging</p>
<p>这种模式吞吐会比较高，当锁被释放时，会唤醒第一个等待者，直接把锁给第一个等待者或者给第一个请求锁的人</p>
</li>
<li><p>Handsoff</p>
<p>当锁释放的时候，锁会一直持有知道第一个等待者准备好获取锁。这种模式吞吐会下降，但是goroutine拿到锁的概率相对公平</p>
</li>
<li><p>Spinning</p>
<p>自旋，再等待队列为空或者应用程重度使用锁的时候，效果较好</p>
</li>
<li><p>Go1.8以后采用的是Barging和Spining的结合实现</p>
<ul>
<li>当同时满足下列条件时，goroutine将自旋几次，自旋后，goroutine park<ul>
<li>本地队列为空</li>
<li>P的数量要大于1</li>
</ul>
</li>
<li>在Go1.9后，添加了一个饥饿模式来解决获取锁的公平问题。所有等待锁时间超过一毫秒的goroutine会被标记为饥饿，当被标记为饥饿状态时，unlock方法会使用handsoff模式将锁直接交给第一个等待者。在饥饿模式下，自旋会被停用，因为传入的goroutines将没有机会获取为下一个等待者保留的锁</li>
</ul>
</li>
</ul>
<h2 id="errgroup"><a href="#errgroup" class="headerlink" title="errgroup"></a>errgroup</h2><p><a href="https://pkg.go.dev/golang.org/x/sync/errgroup">errgroup</a>的核心原里是利用sync.Waitgroup管理并执行goroutine，非常适合以下场景</p>
<ul>
<li>并行工作流</li>
<li>错误处理与优雅降级</li>
<li>context传播与取消</li>
<li>利用局部变量+闭包</li>
</ul>
<h3 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h3><p>sync.Pool的场景是用来保存和复用临时对象，以减少内存分配，降低GC压力，适合Request-Driven场景（指请求一个数据的时候，如果pool中没有数据，可以在获取或者计算完数据结果后放入pool中，下一次调用时，如果pool中的数据符合需求，可直接提出来使用，避免再次获取或者运算，提高性能）</p>
<p>因为sync.Pool中防止的对象，会说不准什么时候被回收掉（1.13后引入victim cache，但是最多只会保留两轮GC）</p>
<p>我们使用Pool的时候注意不应该放带状态的，可以被随时回收不造成不良影响的对象</p>
<h1 id="Package-Channel"><a href="#Package-Channel" class="headerlink" title="Package Channel"></a>Package Channel</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>channel是一种类型安全的消息队列，充当goroutine之间的管道，将通过它同步的进行任意资源的交换。</p>
<p>channel分为：</p>
<ul>
<li><p>unbuffered channel</p>
<ol>
<li><p>无缓冲通道，发送者需要等接收者接受值才会解除阻塞，意味着发送者解除阻塞了，接收者就一定接收到了数据，但是可能会产生时间延迟的代价</p>
</li>
<li><p>receiver先于sender发生</p>
</li>
<li><p>适合同步通信的场景</p>
</li>
</ol>
</li>
<li><p>buffered channel</p>
<ol>
<li><p>发送者只有在通道被填满之后才会产生阻塞，但是不保证数据一定到达接收者。buffer越大，越难以保证数据到达</p>
</li>
<li><p>sender先于receiver发生</p>
</li>
<li><p>适合异步通信场景</p>
</li>
</ol>
</li>
</ul>
<p>创建channel时定义缓冲区的大小会极大地影响程序性能</p>
<p>我们要注意，一定要保证没有人往channel发送消息了才能close</p>
<h2 id="常用的并发Pattern"><a href="#常用的并发Pattern" class="headerlink" title="常用的并发Pattern"></a>常用的并发Pattern</h2><ul>
<li>Timing out</li>
<li>Moving on</li>
<li>Pipeline</li>
<li>Fan-out, Fan-in</li>
<li>Cancellation</li>
<li>Context</li>
</ul>
<p>reference:</p>
<p><a href="https://go.dev/blog/concurrency-timeouts">Go Concurrency Patterns: Timing out, moving on</a></p>
<p><a href="https://go.dev/blog/pipelines">Go Concurrency Patterns: Pipelines and cancellation</a></p>
<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>可以使得跨API边界的请求范围元数据，取消信号和截至时间很容易传递到处理请求设计的所有goroutine中（显式传递）</p>
<p>当一个请求被取消或者超时时，处理该请求的goroutine都可以被快速退出（fail fast）来迅速释放资源</p>
<h3 id="集成context到API"><a href="#集成context到API" class="headerlink" title="集成context到API"></a>集成context到API</h3><p>将context集成到api时，要注意他的作用域应该是请求级别的</p>
<ul>
<li><p>首个参数为context</p>
</li>
<li><p>一个请求结构体中的一个可选的配置</p>
<p>这里要注意的是，我们一定要明确某个结构体是与请求相关的时候，才将context作为其字段放入，如http的Request结构体。但如果一个结构体与请求无关时，我们要尽可能避免挂载context对象</p>
</li>
</ul>
<p>目前比较好的实践是，context应该在整个应用程序中流动，贯穿所有代码</p>
<h3 id="WithValue"><a href="#WithValue" class="headerlink" title="WithValue"></a>WithValue</h3><p>每次调用context.WithValue都会新创建一个context。当尝试从一个context中获取一个value时，会先判定该key在当前context的key是否相等，否在会递归调用父节点的context知道key匹配</p>
<p>value context的定义如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> valueCtx <span class="keyword">struct</span> &#123;</span><br><span class="line">    Context</span><br><span class="line">    key, val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是：valueCtx的key，我们应该使用一个自定义的类型去替代Go中的基本类型，如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设我们想使用string作为key的时候</span></span><br><span class="line"><span class="keyword">type</span> KeyString <span class="type">string</span></span><br><span class="line">ctx := context.WithValue(context.Background(), KeyString(<span class="string">&quot;myKey&quot;</span>), <span class="string">&quot;myValue&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>可以看到，每次产生的context是通过链表的形式管理起来的，因此，我们应该尽量避免在context中多次挂载value（链表查询的时间复杂度为O(n)），当要挂载较多的值时，尽可能一次性整合到一个数据结构中再挂载上去。</p>
<p>挂载上去的应该是请求级别的一些元数据</p>
<p>如果要修改context里面的value，一定要采取copy on write的思路，先深拷贝一份数据出来，再新生成一个context，再把新的value放入新的context，再传入下一个调用，下面是一个较好的实践</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> KeyString <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeCtx</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 假设原来的context是一个valueCtx，里面有一个kv是a=100</span></span><br><span class="line">    <span class="comment">// 现在我们想把a中的值加上100，然后再传递给下一个函数doSomething</span></span><br><span class="line">    key := KeyString(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    orginA := ctx.Value(key)</span><br><span class="line">    <span class="keyword">if</span> orginA != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> value, ok := orginA.(<span class="type">int</span>);ok &#123;</span><br><span class="line">        	ctx = context.WithValue(ctx, key, value + <span class="number">100</span>)</span><br><span class="line">            doSomething(ctx)</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样子做的目的是，不会污染了同时调用了同一个context的其它函数，避免data race。context本质上只是用来传递信息的，它不应该被使用来作为控制流</p>
<p>在替换context的时候，一定要用下面方法中的一种：</p>
<ul>
<li>WithCancel</li>
<li>WithDeadline</li>
<li>WithTimeout</li>
<li>WithValue</li>
</ul>
<h3 id="context-cancel"><a href="#context-cancel" class="headerlink" title="context cancel"></a>context cancel</h3><p>当一个context被取消时，所有从他派生的context（链表上的context被递归取消）也会被取消，从而让整个调用链中所有监听cancel的goroutine推出</p>
<p>所有被阻塞，或者长时间的操作，应该考虑可以被调用者随时cancel，实现超时控制，一个好的实践如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithDeadLine(context.Background(), time.Now().Add(time.Second))</span><br><span class="line">    <span class="comment">// 既是有超时控制，我们也应该记得在函数退出的时候调用这个cancel方法</span></span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-time.After(<span class="number">2</span> * time.Second):</span><br><span class="line">        <span class="keyword">case</span> &lt;- ctx.Done():</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go的入门笔记</title>
    <url>/blog/2019/11/26/Go%E7%9A%84%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>Go的切片操作和之前的使用的切片会有些不一样，专门写个笔记记录一下</p>
<p>总的来说移除切片有两种方法，<strong>移动指针</strong>或者<strong>原地操作</strong></p>
<span id="more"></span>
<ul>
<li><p>移除切片的第一个元素</p>
<p>移动指针：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">	a = a[<span class="number">1</span>:]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// [1 2 3 4 5 6], 0xc00000c390</span></span><br><span class="line"><span class="comment">// [2 3 4 5 6], 0xc00000c398</span></span><br></pre></td></tr></table></figure>

<p>原地操作：</p>
<ul>
<li>使用append</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">	a = <span class="built_in">append</span>(a[:<span class="number">0</span>], a[<span class="number">1</span>:]...)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// [1 2 3 4 5 6], 0xc00000c390</span></span><br><span class="line"><span class="comment">// [2 3 4 5 6], 0xc00000c390</span></span><br></pre></td></tr></table></figure>

<p>思路分析：</p>
<ol>
<li><p>append函数第一个参数指定了追加部分的起始位置，并把起始位置之后的内容舍弃（起始位置为0，即把切片中原本所有的元素舍弃）</p>
</li>
<li><p>函数第二个参数传入了要追加的内容，为原本a的第1位以后的所有元素，从a的第0位开始追加，达到舍弃原本的第0位的效果</p>
</li>
</ol>
<ul>
<li>使用copy</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">    a = a[:<span class="built_in">copy</span>(a[<span class="number">0</span>:], a[<span class="number">1</span>:])]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// [1 2 3 4 5 6], 0xc00000c390</span></span><br><span class="line"><span class="comment">// [2 3 4 5 6], 0xc00000c390</span></span><br></pre></td></tr></table></figure>

<p>思路分析：</p>
<ol>
<li><p>copy函数第一个参数指定了覆盖的位置为原始a的第0为，第二个参数指定了覆盖的内容为原始a的第1位开始之后的所有元素（2 - 5共5位，从第0位就开始覆盖到第4位），并且copy返回覆盖的元素的个数（5）</p>
</li>
<li><p>执行完copy函数后此时a的值为[2, 3, 4, 5, 6, 6]，此时使用切片从a[0: 5]，把最后的多余的6去除</p>
</li>
</ol>
</li>
<li><p>移除切片的第n个元素</p>
<p>根据上面的移除第一个元素的做法，我们可以推广到移除第n个元素的操作</p>
<p>使用append：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> i = <span class="number">2</span></span><br><span class="line">	a := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">	a = <span class="built_in">append</span>(a[: i], a[i + <span class="number">1</span>:]...)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// [1 2 3 4 5 6], 0xc00000c390</span></span><br><span class="line"><span class="comment">// [1 2 4 5 6], 0xc00000c390</span></span><br></pre></td></tr></table></figure>

<p>使用copy：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> i = <span class="number">2</span></span><br><span class="line">	a := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">	a = a[:i + <span class="built_in">copy</span>(a[i : ], a[i + <span class="number">1</span>:])]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// [1 2 3 4 5 6], 0xc00000c390</span></span><br><span class="line"><span class="comment">// [1 2 4 5 6], 0xc00000c390</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>移除切片的最后一个元素</p>
<p>移除最后一个元素则比较简单，由于都是从原始切片的首位开始切，所以直接切即可…..</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">	a = a[:<span class="built_in">len</span>(a) - <span class="number">1</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v, %p\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// [1 2 3 4 5 6], 0xc00000c390</span></span><br><span class="line"><span class="comment">// [1 2 3 4 5], 0xc00000c390</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go错误处理笔记</title>
    <url>/blog/2022/02/12/Go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>error在go中是一个接口，定义如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<span id="more"></span> 

<p>标准库里的errors包的实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> errorString <span class="keyword">struct</span> &#123;</span><br><span class="line">    s <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errorString)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="对比panic"><a href="#对比panic" class="headerlink" title="对比panic"></a>对比panic</h2><p>error是函数或者方法主动抛出，希望调用者手动去处理的错误</p>
<p>panic意味着发生严重错误，程序不应该继续运行下去，并且不能假设调用者来解决panic</p>
<h2 id="定义Error"><a href="#定义Error" class="headerlink" title="定义Error"></a>定义Error</h2><p>最佳实践为：<code>package name: error information</code></p>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from bufio</span></span><br><span class="line"><span class="keyword">var</span> ErrBufferFull = errors.New(<span class="string">&quot;bufio: buffer full&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="Error-Type"><a href="#Error-Type" class="headerlink" title="Error Type"></a>Error Type</h1><h2 id="Sentinel-Error"><a href="#Sentinel-Error" class="headerlink" title="Sentinel Error"></a>Sentinel Error</h2><p>预定义的特定错误</p>
<ul>
<li><p>sentinel值是最不灵活的错误处理策略，我们不应该依赖检查error.Error的输出</p>
</li>
<li><p>sentinel error会成为你的API的公共部分，会增大API的暴露的表面积（如果接口的表面积越大，则抽象越脆弱），并且会在两个包之间创建依赖，这样就增大了import loop的风险</p>
</li>
<li><p>我们应该尽可能避免直接使用sentinel errors</p>
</li>
</ul>
<h2 id="Error-Types"><a href="#Error-Types" class="headerlink" title="Error Types"></a>Error Types</h2><p>使用switch + type断言来判断错误类型，能获取更多的上下文信息</p>
<p>但是还是没有解决包之间的强耦合的问题</p>
<p>尽可能避免直接使用error types</p>
<h2 id="Opaque-Error"><a href="#Opaque-Error" class="headerlink" title="Opaque Error"></a>Opaque Error</h2><p>不透明的错误处理，调用者虽然知道发生了错误，但是无法知道错误的内部，仅仅能知道该次调用成功或者失败了</p>
<p>其实就是<code>if err != nil &#123;&#125;</code>这种处理方式</p>
<p>但是在一些情况下，这种二分错误处理是不够的，有时候调用方需要知道具体的错误类型，根据错误类型去进行下一步的操作（例如因为网络原因的错误决定是否要进行重试）</p>
<p>这种情况下，我们可以断言错误实现了特定的行为，而不是断言错误是特定的类型或者值，比如下面这个例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myerror <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*myerror)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;my error&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsMyError</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    _, ok := err.(myerror)</span><br><span class="line">    <span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过暴露一个类型断言的方法，来避免直接暴露错误的类型，是比较推荐的实践</p>
<h1 id="Handling-Error"><a href="#Handling-Error" class="headerlink" title="Handling Error"></a>Handling Error</h1><h2 id="处理位置"><a href="#处理位置" class="headerlink" title="处理位置"></a>处理位置</h2><p>错误处理应尽可能在缩进行中进行</p>
<p>无错误的正常流程代码，应成为一条直线，而不是缩进的代码。我们处理错误的时候，应尽可能在<code>if err != nil &#123;&#125;</code>的缩进位置去处理错误的情形，避免代码主干逻辑混乱</p>
<h2 id="减少错误处理"><a href="#减少错误处理" class="headerlink" title="减少错误处理"></a>减少错误处理</h2><p>处理调用结构体内部的方法产生的错误，我们可以在结构体内部包裹一个不对外暴露的错误来讲错误暂存，在结构体的方法前面加上错误判断，如果暂存的错误不为nil，则不做任何处理，直接讲错误返回。这种模式下，调用方则可以减少大量的错误处理。参考下面的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> errWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">    io.Writer</span><br><span class="line">    err <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errWriter)</span></span> Write(buf []<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> e.err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, e.err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> n <span class="type">int</span></span><br><span class="line">    n, e.err = e.Writer.Write(buf)</span><br><span class="line">    <span class="keyword">return</span> n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原本<code>io.Writer.Write</code>方法每次都会返回一个错误需要调用者来进行处理，上面的例子使用一个结构体将其与一个暂存错误包裹起来，这样调用方仅需要处理最后的那个错误，而不是每写入一次就要处理一次错误，减少了代码量</p>
<h2 id="Wrap-Error"><a href="#Wrap-Error" class="headerlink" title="Wrap Error"></a>Wrap Error</h2><p>错误的调用堆栈信息对调用者而言十分重要，否则在出现错误的时候调用者就要一层层往下查找调用链，非常的麻烦。日志记录与错误无关且对调试没有帮助的信息应被视为噪音，记录的原因应是某个调用失败了，而日志中包含了它失败的原因，因此，同一个调用的错误信息，应在日志中完整且连续。</p>
<p>我们在遇到错误的时候，只应该从下面的行为中挑选一种方式去处理：</p>
<ul>
<li>将错误抛给上层</li>
<li>自行对错误进行处理，处理完后该错误则无需再抛给上层（如记录日志）</li>
</ul>
<p>目前go的wrap error在标准库的实现做的不是很好，需要依赖第三方的库，常用的为<code>github.com/pkg/errors</code></p>
<ul>
<li>能方便我们保留原始的堆栈信息</li>
<li>同时在不破坏原始错误信息的类型或者值的前提下，附带上一些额外的上下文信息。</li>
</ul>
<h2 id="pkg-x2F-errors"><a href="#pkg-x2F-errors" class="headerlink" title="pkg&#x2F;errors"></a>pkg&#x2F;errors</h2><ul>
<li><p>为错误添加上下文</p>
<p>在与其它库进行协作的时候，考虑使用<code>errors.Wrap</code>或者<code>errors.Wrapf</code>来保存堆栈信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Write</span><span class="params">(w io.Write, buf []<span class="type">byte</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    _, err := w.Write(buf)</span><br><span class="line">    <span class="keyword">return</span> errors.Wrap(err, <span class="string">&quot;write failed&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在最后记录日志错误时，在最顶部的位置，使用<code>%+v</code>把堆栈详情记录下来</p>
</li>
<li><p>在应用代码中，使用<code>pkg/errors</code>中的<code>errors.New</code>或者<code>errors.Errorf</code>返回错误</p>
<p>在<code>pkg/errors</code>中的这两个方法是包含堆栈信息的，而标准库中的<code>errors.New</code>则没有这个功能</p>
</li>
<li><p>使用<code>errors.Cause</code>来获取根错误，来进行错误判定或者类型断言</p>
</li>
<li><p>如果你的库是基础库，是会被其他人去使用的，此时你应该尽量返回原始错误而不是使用wrap后的错误，我们尽量是在应用级别的代码去使用wrap</p>
<p>因为在进行wrap一次之后，如果调用方在wrap一次，在打印堆栈信息的时候就会被打印两次，对于调试没有帮助</p>
</li>
</ul>
<h2 id="1-13的error"><a href="#1-13的error" class="headerlink" title="1.13的error"></a>1.13的error</h2><ul>
<li><p><code>errors.Unwrap</code></p>
<p>我们可以为自定义的error来实现Unwrap方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *CustomError)</span></span> UnWrap() <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过该形式为<code>errors.Is</code>和<code>errors.As</code>提供根因检查</p>
</li>
<li><p>使用<code>%w</code>来包装错误</p>
<p>1.13中可以使用<code>fmt.Errorf</code>为错误追加附加信息时，还可以通过<code>%w</code>来讲原始错误的值和类型信息保留，效果与<code>pkg/errors</code>中的wrap类似，但是，它没有保留调用堆栈信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;error happened: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>errors.Is</code></p>
<p>使用了<code>%w</code>来包装的错误，可以通过<code>errors.Is</code>来进行错误等值判断</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> errors.Is(err, MyCustomError) &#123;</span><br><span class="line">        <span class="comment">// your action</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>errors.Is</code>方法会按照以下步骤运行：</p>
<ol>
<li>该error有无实现了<code>func Is(err, target error)bool</code>方法，若有，则按照用户自己实现的Is方法进行等值判断</li>
<li>若没有实现Is方法，则不断调用<code>errors.Unwrap</code>来层层获取，直到获取到了错误的根因，再与提供的错误进行判断</li>
</ol>
<p>因此我们可以自己对自定义的错误类型的Is方法进行扩展</p>
</li>
<li><p><code>errors.As</code></p>
<p>使用了<code>%w</code>来包装的错误，可以通过<code>errors.As</code>来进行错误类型断言</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> errors.As(err, &amp;MyCustomError&#123;&#125;) &#123;</span><br><span class="line">        <span class="comment">// your action</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和<code>errors.Is</code>一样，我们也可以自己对自定义的错误类型的As方法进行扩展</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用的快捷键</title>
    <url>/blog/2019/11/04/IDEA%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>最近在学习使用IDEA进行大数据的离线开发，摘取了极客学院的<a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-introduce.html">IDEA使用教程–IDEA快捷键</a>中的部分内容留作自己平时查阅用，有兴趣了解全文的同学请移步极客学院的IDEA教程</p>
<span id="more"></span>

<h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + F</td>
<td align="left">在当前文件进行文本查找 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + R</td>
<td align="left">在当前文件进行文本替换 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Z</td>
<td align="left">撤销 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Y</td>
<td align="left">删除光标所在行 或 删除选中的行 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + X</td>
<td align="left">剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td align="left">Ctrl + C</td>
<td align="left">复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td align="left">Ctrl + D</td>
<td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + W</td>
<td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + E</td>
<td align="left">显示最近打开的文件记录列表 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + N</td>
<td align="left">根据输入的 <strong>类名</strong> 查找类文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + G</td>
<td align="left">在当前文件跳转到指定行处</td>
</tr>
<tr>
<td align="left">Ctrl + J</td>
<td align="left">插入自定义动态代码模板 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + P</td>
<td align="left">方法参数提示显示 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Q</td>
<td align="left">光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td align="left">Ctrl + U</td>
<td align="left">前往当前光标所在的方法的父类的方法 &#x2F; 接口定义 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + B</td>
<td align="left">进入光标所在的方法&#x2F;变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code> <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + K</td>
<td align="left">版本控制提交项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td align="left">Ctrl + T</td>
<td align="left">版本控制更新项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td align="left">Ctrl + H</td>
<td align="left">显示当前类的层次结构</td>
</tr>
<tr>
<td align="left">Ctrl + O</td>
<td align="left">选择可重写的方法</td>
</tr>
<tr>
<td align="left">Ctrl + I</td>
<td align="left">选择可继承的方法</td>
</tr>
<tr>
<td align="left">Ctrl + +</td>
<td align="left">展开代码</td>
</tr>
<tr>
<td align="left">Ctrl + -</td>
<td align="left">折叠代码</td>
</tr>
<tr>
<td align="left">Ctrl + &#x2F;</td>
<td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + [</td>
<td align="left">移动光标到当前所在代码的花括号开始位置</td>
</tr>
<tr>
<td align="left">Ctrl + ]</td>
<td align="left">移动光标到当前所在代码的花括号结束位置</td>
</tr>
<tr>
<td align="left">Ctrl + F1</td>
<td align="left">在光标所在的错误代码处显示错误信息 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + F3</td>
<td align="left">调转到所选中的词的下一个引用位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + F4</td>
<td align="left">关闭当前编辑文件</td>
</tr>
<tr>
<td align="left">Ctrl + F8</td>
<td align="left">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td align="left">Ctrl + F9</td>
<td align="left">执行 Make Project 操作</td>
</tr>
<tr>
<td align="left">Ctrl + F11</td>
<td align="left">选中文件 &#x2F; 文件夹，使用助记符设定 &#x2F; 取消书签 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + F12</td>
<td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td align="left">Ctrl + Tab</td>
<td align="left">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td align="left">Ctrl + End</td>
<td align="left">跳到文件尾</td>
</tr>
<tr>
<td align="left">Ctrl + Home</td>
<td align="left">跳到文件头</td>
</tr>
<tr>
<td align="left">Ctrl + Space</td>
<td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Delete</td>
<td align="left">删除光标后面的单词或是中文句 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + BackSpace</td>
<td align="left">删除光标前面的单词或是中文句 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + 1,2,3…9</td>
<td align="left">定位到对应数值的书签位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + 左键单击</td>
<td align="left">在打开的文件标题上，弹出该文件路径 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + 光标定位</td>
<td align="left">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>
</tr>
<tr>
<td align="left">Ctrl + 左方向键</td>
<td align="left">光标跳转到当前单词 &#x2F; 中文句的左侧开头位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + 右方向键</td>
<td align="left">光标跳转到当前单词 &#x2F; 中文句的右侧开头位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + 前方向键</td>
<td align="left">等效于鼠标滚轮向前效果 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + 后方向键</td>
<td align="left">等效于鼠标滚轮向后效果 <code>（必备）</code></td>
</tr>
</tbody></table>
<h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Alt + &#96;</td>
<td align="left">显示版本控制常用操作菜单弹出层 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + Q</td>
<td align="left">弹出一个提示，显示当前类的声明 &#x2F; 上下文信息</td>
</tr>
<tr>
<td align="left">Alt + F1</td>
<td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + F2</td>
<td align="left">对于前面页面，显示各类浏览器打开目标选择弹出层</td>
</tr>
<tr>
<td align="left">Alt + F3</td>
<td align="left">选中文本，逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td align="left">Alt + F7</td>
<td align="left">查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方</td>
</tr>
<tr>
<td align="left">Alt + F8</td>
<td align="left">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>
</tr>
<tr>
<td align="left">Alt + Home</td>
<td align="left">定位 &#x2F; 显示到当前文件的 <code>Navigation Bar</code></td>
</tr>
<tr>
<td align="left">Alt + Enter</td>
<td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + Insert</td>
<td align="left">代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + 左方向键</td>
<td align="left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + 右方向键</td>
<td align="left">按切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + 前方向键</td>
<td align="left">当前光标跳转到当前文件的前一个方法名位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + 后方向键</td>
<td align="left">当前光标跳转到当前文件的后一个方法名位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + 1,2,3…9</td>
<td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多 <code>（必备）</code></td>
</tr>
</tbody></table>
<h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Shift + F1</td>
<td align="left">如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td align="left">Shift + F2</td>
<td align="left">跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td align="left">Shift + F3</td>
<td align="left">在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td align="left">Shift + F4</td>
<td align="left">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>
</tr>
<tr>
<td align="left">Shift + F6</td>
<td align="left">对文件 &#x2F; 文件夹 重命名</td>
</tr>
<tr>
<td align="left">Shift + F7</td>
<td align="left">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td align="left">Shift + F8</td>
<td align="left">在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td>
</tr>
<tr>
<td align="left">Shift + F9</td>
<td align="left">等效于点击工具栏的 <code>Debug</code> 按钮</td>
</tr>
<tr>
<td align="left">Shift + F10</td>
<td align="left">等效于点击工具栏的 <code>Run</code> 按钮</td>
</tr>
<tr>
<td align="left">Shift + F11</td>
<td align="left">弹出书签显示层 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Shift + Tab</td>
<td align="left">取消缩进 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Shift + ESC</td>
<td align="left">隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td align="left">Shift + End</td>
<td align="left">选中光标到当前行尾位置</td>
</tr>
<tr>
<td align="left">Shift + Home</td>
<td align="left">选中光标到当前行头位置</td>
</tr>
<tr>
<td align="left">Shift + Enter</td>
<td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Shift + 左键单击</td>
<td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Shift + 滚轮前后滚动</td>
<td align="left">当前文件的横向滚动轴滚动 <code>（必备）</code></td>
</tr>
</tbody></table>
<h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Alt + L</td>
<td align="left">格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + O</td>
<td align="left">优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + I</td>
<td align="left">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + T</td>
<td align="left">对选中的代码弹出环绕选项弹出层 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + J</td>
<td align="left">弹出模板选择窗口，将选定的代码加入动态模板中</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + H</td>
<td align="left">调用层次</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + B</td>
<td align="left">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + C</td>
<td align="left">重构-快速提取常量</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + F</td>
<td align="left">重构-快速提取成员变量</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + V</td>
<td align="left">重构-快速提取变量</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Y</td>
<td align="left">同步、刷新</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + S</td>
<td align="left">打开 IntelliJ IDEA 系统设置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + F7</td>
<td align="left">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + F11</td>
<td align="left">切换全屏模式</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Enter</td>
<td align="left">光标所在行上空出一行，光标定位到新行 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Home</td>
<td align="left">弹出跟当前文件有关联的文件弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Space</td>
<td align="left">类名自动完成</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 左方向键</td>
<td align="left">退回到上一个操作的地方 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 右方向键</td>
<td align="left">前进到上一个操作的地方 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 前方向键</td>
<td align="left">在查找模式下，跳到上个查找的文件</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 后方向键</td>
<td align="left">在查找模式下，跳到下个查找的文件</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 右括号（]）</td>
<td align="left">在打开多个项目的情况下，切换下一个项目窗口</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 左括号（[）</td>
<td align="left">在打开多个项目的情况下，切换上一个项目窗口</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Shift + F</td>
<td align="left">根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + R</td>
<td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + J</td>
<td align="left">自动将下一行合并到当前行末尾 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Z</td>
<td align="left">取消撤销 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + W</td>
<td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + N</td>
<td align="left">通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + U</td>
<td align="left">对选中的代码进行大 &#x2F; 小写轮流转换 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + T</td>
<td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + C</td>
<td align="left">复制当前文件磁盘路径到剪贴板 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + V</td>
<td align="left">弹出缓存的最近拷贝的内容管理器弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + E</td>
<td align="left">显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + H</td>
<td align="left">显示方法层次结构</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + B</td>
<td align="left">跳转到类型声明处 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + I</td>
<td align="left">快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + A</td>
<td align="left">查找动作 &#x2F; 设置</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + &#x2F;</td>
<td align="left">代码块注释 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + [</td>
<td align="left">选中从光标所在位置到它的顶部中括号位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + ]</td>
<td align="left">选中从光标所在位置到它的底部中括号位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + +</td>
<td align="left">展开所有代码 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + -</td>
<td align="left">折叠所有代码 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F7</td>
<td align="left">高亮显示所有该选中文本，按Esc高亮消失 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F8</td>
<td align="left">在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F9</td>
<td align="left">编译选中的文件 &#x2F; 包 &#x2F; Module</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F12</td>
<td align="left">编辑器最大化 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Space</td>
<td align="left">智能代码提示</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Enter</td>
<td align="left">自动结束代码，行末自动添加分号 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Backspace</td>
<td align="left">退回到上次修改的地方 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 1,2,3…9</td>
<td align="left">快速添加指定数值的书签 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 左键单击</td>
<td align="left">把光标放在某个类变量上，按此快捷键可以直接定位到该类中 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 左方向键</td>
<td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 右方向键</td>
<td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 前方向键</td>
<td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 后方向键</td>
<td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 <code>（必备）</code></td>
</tr>
</tbody></table>
<h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Alt + Shift + N</td>
<td align="left">选择 &#x2F; 添加 task <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + Shift + F</td>
<td align="left">显示添加到收藏夹弹出层 &#x2F; 添加到收藏夹</td>
</tr>
<tr>
<td align="left">Alt + Shift + C</td>
<td align="left">查看最近操作项目的变化情况列表</td>
</tr>
<tr>
<td align="left">Alt + Shift + I</td>
<td align="left">查看项目当前文件</td>
</tr>
<tr>
<td align="left">Alt + Shift + F7</td>
<td align="left">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td align="left">Alt + Shift + F9</td>
<td align="left">弹出 <code>Debug</code> 的可选择菜单</td>
</tr>
<tr>
<td align="left">Alt + Shift + F10</td>
<td align="left">弹出 <code>Run</code> 的可选择菜单</td>
</tr>
<tr>
<td align="left">Alt + Shift + 左键双击</td>
<td align="left">选择被双击的单词 &#x2F; 中文句，按住不放，可以同时选择其他单词 &#x2F; 中文句 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + Shift + 前方向键</td>
<td align="left">移动光标所在行向上移动 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + Shift + 后方向键</td>
<td align="left">移动光标所在行向下移动 <code>（必备）</code></td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Shift + Alt + V</td>
<td align="left">无格式黏贴 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + N</td>
<td align="left">前往指定的变量 &#x2F; 方法</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + S</td>
<td align="left">打开当前项目设置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + C</td>
<td align="left">复制参考信息</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F2</td>
<td align="left">跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">F3</td>
<td align="left">在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td align="left">F4</td>
<td align="left">编辑源 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">F7</td>
<td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td align="left">F8</td>
<td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td align="left">F9</td>
<td align="left">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td align="left">F11</td>
<td align="left">添加书签 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">F12</td>
<td align="left">回到前一个工具窗口 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Tab</td>
<td align="left">缩进 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">ESC</td>
<td align="left">从工具窗口进入代码文件窗口 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">连按两次Shift</td>
<td align="left">弹出 <code>Search Everywhere</code> 弹出层</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>大数据离线开发</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB MVCC笔记</title>
    <url>/blog/2021/01/25/InnoDB-MVCC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>多版本并发控制，MySQL中仅<code>innoDB</code>支持</p>
<p>依赖于：</p>
<ol>
<li>隐藏字段（<code>trx_id</code>，<code>roll_pointer</code>）</li>
<li>undo log</li>
<li>read view</li>
</ol>
<span id="more"></span>

<h2 id="读行为"><a href="#读行为" class="headerlink" title="读行为"></a>读行为</h2><h3 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h3><p>读到undo log的某一个历史版本，不加锁的SELECT都属于快照读</p>
<h3 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h3><p>读到最新版本，加锁的SELECT，对数据进行增删改都会进行当前读</p>
<h2 id="Read-View"><a href="#Read-View" class="headerlink" title="Read View"></a>Read View</h2><ul>
<li>事务在使用MVCC机制进行快照读的时候产生的读视图，每个Read View都属于一个事务。事务启动时会生成数据库当前的一个快照，<code>InnoDB</code>为每个书屋构造一个数组来记录并维护系统当前的活跃事务的id</li>
<li>仅&#x3D;&#x3D;读已提交&#x3D;&#x3D;和&#x3D;&#x3D;可重复读&#x3D;&#x3D;里使用read view</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li>create_trx_id: 创建read view的事务id</li>
<li>trx_ids: 当前系统活跃事务列表</li>
<li>up_limit_id: 活跃事务中最小的事务id</li>
<li>low_limit_id: 生成read view时刻系统分配的&#x3D;&#x3D;下一个&#x3D;&#x3D;事务id</li>
</ul>
<h3 id="记录的版本可见性规则"><a href="#记录的版本可见性规则" class="headerlink" title="记录的版本可见性规则"></a>记录的版本可见性规则</h3><ul>
<li>如果被访问的版本的trx_id和read view中的creator_trx_id一致，说明当前事务在访问自身修改过的记录，该版本&#x3D;&#x3D;可&#x3D;&#x3D;被当前事务访问</li>
<li>如果当前访问版本的trx_id&#x3D;&#x3D;小于&#x3D;&#x3D;up_limit_id，说明该版本是当前事务发生之&#x3D;&#x3D;前&#x3D;&#x3D;已经被提交过了的版本，当前版本&#x3D;&#x3D;可&#x3D;&#x3D;被当前事务访问</li>
<li>如果当前访问版本的trx_id&#x3D;&#x3D;大于&#x3D;&#x3D;low_limit_id，说明该版本是当前事务发生之&#x3D;&#x3D;后&#x3D;&#x3D;才开启的，当前版本&#x3D;&#x3D;不可&#x3D;&#x3D;被当前事务访问</li>
<li>如果当前访问版本的trx_id在up_limit_id和low_limit_id之间：<ol>
<li>如果trx_id在当前read view的trx_ids列表中&#x3D;&#x3D;存在&#x3D;&#x3D;，说明该版本的事务依旧活跃，因此该版本&#x3D;&#x3D;不可&#x3D;&#x3D;被当前事务访问</li>
<li>如果trx_id在当前read view的trx_ids列表中&#x3D;&#x3D;不存在&#x3D;&#x3D;，说明该版本的事务已被提交，因此该版本&#x3D;&#x3D;可&#x3D;&#x3D;被当前事务访问</li>
</ol>
</li>
</ul>
<h3 id="read-view的生成规则"><a href="#read-view的生成规则" class="headerlink" title="read view的生成规则"></a>read view的生成规则</h3><ul>
<li><p>读已提交级别下</p>
<p>相同的查找条件下，事务每次执行SELECT都会生成一个read view</p>
</li>
<li><p>可重复读级别下</p>
<p>相同的查找条件下，事务仅第一次执行SELECT的时候生成已给read view，后续相同的查询都使用该read view直到事务结束</p>
</li>
</ul>
<h3 id="解决幻读"><a href="#解决幻读" class="headerlink" title="解决幻读"></a>解决幻读</h3><blockquote>
<p>可重复读级别下</p>
</blockquote>
<p>假设条件：</p>
<ul>
<li>表中存在一条id为1的记录，该记录隐藏列的事务id为10</li>
<li>一个事务A的id为20，执行<code>SELECT * from t where id &gt; 0;</code></li>
<li>同时一个事务B的id为30，执行<code>INSERT INTO t(id, name) value(2, &quot;test&quot;);</code></li>
<li>此时事务A的read view的状态为：<ol>
<li>create_trx_id: 20</li>
<li>trx_ids: [20, 30]</li>
<li>up_limit_id: 20</li>
<li>low_limit_id: 31</li>
</ol>
</li>
<li>事务B提交后，事务A查询的时候会看到id&#x3D;2的记录，但是该记录的trx_id是30，在read view的trx_ids中存在，说明此时在read view创建时事务30还在活跃状态，因此该记录对当前事务不可见，因此会被过滤掉，从而解决幻读</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB 事务笔记</title>
    <url>/blog/2021/01/20/InnoDB-%E4%BA%8B%E5%8A%A1%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MySQL中仅<code>innoDB</code>支持事务</p>
<span id="more"></span>

<h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ul>
<li><p>原子性：事务是不可分割的工作单位，全部提交&#x2F;失败回滚，不存在中间状态</p>
<p>undo log保证</p>
</li>
<li><p>一致性：事务执行前后数据从一个合法状态变换到另一个合法状态</p>
<p>undo log保证</p>
</li>
<li><p>隔离性：事物的执行不能被其它事务干扰</p>
<p>锁机制实现</p>
</li>
<li><p>持久性：事务被提交后对数据改变是永久的</p>
<p>redo log保证</p>
</li>
</ul>
<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><ul>
<li><p>脏写：事务A修改了未提交的事务B修改过的数据，所有隔离级别都不允许出现</p>
</li>
<li><p>脏读：事务A读到事务B&#x3D;&#x3D;未提交&#x3D;&#x3D;的数据</p>
</li>
<li><p>不可重复读：事务A每次都读到事务B&#x3D;&#x3D;已经提交&#x3D;&#x3D;的最新数据</p>
</li>
<li><p>幻读：事务A在进行&#x3D;&#x3D;范围读取&#x3D;&#x3D;的时候能读到事务B&#x3D;&#x3D;已经提交&#x3D;&#x3D;的&#x3D;&#x3D;新插入&#x3D;&#x3D;的符合该范围的数据</p>
<p>（注意：先前读到后面读不到的情况属于不可重复读）</p>
</li>
</ul>
<h3 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h3><blockquote>
<p>并发能力从高到低，解决的并发问题从少到多</p>
</blockquote>
<ul>
<li><p>读未提交</p>
<p>不加读锁，解决脏写</p>
</li>
<li><p>读已提交</p>
<p>不加读锁，解决脏写，脏读</p>
</li>
<li><p>可重复读</p>
<p>不加读锁，解决脏写，脏读，不可重复读</p>
<p>（在<code>innoDB</code>的可重复读级别解决了幻读）</p>
</li>
<li><p>可串行化</p>
<p>加读锁，并发问题全部解决</p>
</li>
</ul>
<h2 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h2><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><ul>
<li><p>记录物理级别的页修改，由存储引擎层产生</p>
</li>
<li><p>内存中的数据在写入磁盘之前先写redo log(WAL, write ahead logging，日志写入成功事务才算提交成功)，意味着事务一旦提交成功就保证它存在于redo log</p>
</li>
</ul>
<p>特点：</p>
<ol>
<li>顺序IO，相比数据页的写入的随机IO，性能大幅提高</li>
</ol>
<p>组成：</p>
<ol>
<li>redo log buffer – default：16mb</li>
<li>redo file</li>
</ol>
<p>运转流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Data file--&gt;&gt;Buffer pool: find update rows</span><br><span class="line">    Update tx-&gt;&gt;Buffer pool: update data in buffer</span><br><span class="line">    Buffer pool -&gt;&gt; Redo log buffer: write redo log in buffer</span><br><span class="line">    Redo log buffer -&gt;&gt; Redo log file: write redo log in file</span><br><span class="line">    Buffer pool--&gt;&gt;Data file: update data file</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>redo log刷盘策略</p>
<ol>
<li>每次事务提交不做任何动作，交给后台master thread每隔1s进行一次redo log同步</li>
<li>每次事务提交都buffer内容写入page cache并同步刷盘（default）</li>
<li>每次事务提交只把buffer内容写入page cache，不同步，让OS决定同步刷盘时间</li>
</ol>
<p>用途</p>
<ol>
<li>数据库恢复的时候使用，保证持久性</li>
</ol>
<h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><ul>
<li><p>记录的是逻辑操作的日志（记录SQL语句）</p>
</li>
<li><p>事务更新操作的之前会预先写入一个undo log</p>
</li>
<li><p>undo log会产生redo log</p>
</li>
</ul>
<p>生命周期：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Data file--&gt;&gt;Buffer pool: find update rows stores in buffer</span><br><span class="line">    Update tx-&gt;&gt;Buffer pool: update data in buffer</span><br><span class="line">    Buffer pool -&gt;&gt; Undo log: write undo log</span><br><span class="line">    Executor -&gt;&gt; Buffer pool: update data in data buffer</span><br><span class="line">    Executor -&gt;&gt; Redo log buffer: write into redo log buffer</span><br><span class="line">    Redo log buffer -&gt;&gt; Redo log file: write redo log in file</span><br><span class="line">    Buffer pool--&gt;&gt;Data file: update data file</span><br></pre></td></tr></table></figure>

<p>生成过程：</p>
<ul>
<li><p>行记录隐藏列</p>
<ol>
<li>DB_ROW_ID：行id</li>
<li>DB_TRX_ID：事务id</li>
<li>DB_ROLL_PTR：回滚指针，指向上一个undo log</li>
</ol>
</li>
<li><p>insert时</p>
<p>生成一条insert undo log，记录undo log序号，主键和列值。</p>
<p>进行回滚值需把逐渐对应数据删除即可</p>
</li>
<li><p>update时</p>
<p>不更新主键：</p>
<ol>
<li><p>生成一个新的undo log（log A），记录列信息</p>
</li>
<li><p>log A指向记录的回滚指针指向的undo log（log B）</p>
</li>
<li><p>记录的回滚指针指向log A</p>
</li>
</ol>
<p>更新主键：</p>
<ol>
<li>将原纪录（record A）<code>deletemark</code> &#x3D; 1</li>
<li>record A的回滚指针指向记录<code>deletemark</code> &#x3D; 1的过程的undo log</li>
<li>生成一条新纪录（record B）</li>
<li>record B的回滚指针指向记录更改主键的过程的undo log</li>
</ol>
</li>
</ul>
<p>undo log删除</p>
<ul>
<li><p>insert undo log</p>
<p>事务提交后可以直接删除</p>
</li>
<li><p>update undo log</p>
<p>需要提供MVCC机制的支持，事务提交时需要放入undo log链表等待purse线程去删除</p>
</li>
</ul>
<p>用途：</p>
<ol>
<li>事务回滚</li>
<li>MVCC</li>
</ol>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><ul>
<li>锁所在事务信息</li>
<li>索引信息</li>
<li>表锁&#x2F;行锁信息</li>
<li>type_mode</li>
<li>其它信息</li>
<li>比特位</li>
</ul>
<h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p>S锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM your_table LOCK IN SHARE MODE;</span><br><span class="line"># &gt;= 8.0</span><br><span class="line">SELECT * FROM your_table FOR SHARE;</span><br></pre></td></tr></table></figure>



<h3 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h3><p>X锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM your_table FOR UPDATE;</span><br></pre></td></tr></table></figure>





<h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># S LOCK</span><br><span class="line">LOCK TABLES your_table READ;</span><br><span class="line"># X LOCK</span><br><span class="line">LOCK TABLES your_table WRITE</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>自己可读</th>
<th>自己可写</th>
<th>自己可操作其他表</th>
<th>他人可读</th>
<th>他人可写</th>
</tr>
</thead>
<tbody><tr>
<td>S</td>
<td>True</td>
<td>False</td>
<td>False</td>
<td>True</td>
<td>False, Block</td>
</tr>
<tr>
<td>X</td>
<td>True</td>
<td>True</td>
<td>False</td>
<td>False, Block</td>
<td>False, Block</td>
</tr>
</tbody></table>
<p>意向锁</p>
<ul>
<li>事务获取某些记录的共享锁时需要给当前表添加意向共享锁(IS)</li>
<li>事务获取某些记录的排他锁时需要给当前表添加意向排他锁(IX)</li>
<li>IS和IX均互相兼容，IS和S兼容，其余情况均互斥</li>
</ul>
<p>自增锁 - AUTO-INC</p>
<h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>存储引擎层实现</p>
<ol>
<li><p>记录锁</p>
</li>
<li><p>间隙锁</p>
<ul>
<li><p>对某行记录加上间隙锁，表示不允许对该记录前面的间隙（开区间）插入新的记录</p>
</li>
<li><p>在为了防止插入幻影记录提出</p>
</li>
<li><p>可重入</p>
</li>
<li><p>间隙锁会导致死锁</p>
<p>比如两个事务先分别锁了同一个范围，两边都成功上间隙锁后，再尝试向该范围插入记录，此时就会导致死锁</p>
</li>
</ul>
</li>
<li><p>临键锁</p>
<p>下边界闭区间间隙锁</p>
</li>
<li><p>插入意向锁</p>
<p>插入位置被其它事务加入了间隙锁或者临键锁，此时本事务等待的时候生成一个插入意向锁</p>
</li>
</ol>
<h3 id="页锁"><a href="#页锁" class="headerlink" title="页锁"></a>页锁</h3><p>锁升级：行锁到一定空间会升级为页锁，页锁到一定空间升级为表锁</p>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>基于数据库的锁机制来实现，适合写多读少的较短的事务场景</p>
<p>注意，使用悲观锁的时候一定要确保使用了索引而不是全表扫描。否在会把扫描过的记录全部锁住</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>基于程序设计实现，适用于多读的应用场景，提高吞吐</p>
<ul>
<li><p>基于版本号机制，CAS机制</p>
<p>设计一个版本字段version，修改的时候执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE ... SET version=version+1 WHERE version=`current_version`</span><br></pre></td></tr></table></figure>

<ol>
<li>每次修改数据的时候version都会加1</li>
<li>当进行修改的时候发现version被更新了，修改会因为定位失败而不成功</li>
</ol>
</li>
<li><p>基于时间戳机制</p>
<p>将版本号换成时间戳进行比较</p>
</li>
</ul>
<blockquote>
<p>注意，在独写分离的场景下要强制读取master表中的数据，防止主从由于同步时间造成的不一致</p>
</blockquote>
<h3 id="显式锁"><a href="#显式锁" class="headerlink" title="显式锁"></a>显式锁</h3><p>显式声明的锁</p>
<h3 id="隐式锁"><a href="#隐式锁" class="headerlink" title="隐式锁"></a>隐式锁</h3><p>insert事务在执行前<code>innoDB</code>会为准备插入的新纪录隐式添加一个X锁</p>
<h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>锁住整个库</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>两个事务都在等待对方释放锁才可以继续执行，并且双方都不会释放自己的锁</p>
<p>死锁处理：</p>
<ol>
<li><p>超时：default 50s</p>
</li>
<li><p>死锁检测</p>
<p>主动回滚undo log数量最小的事务</p>
<p>wait-for graph算法主动检测死锁</p>
</li>
</ol>
<p>解决死锁：</p>
<p>造成死锁的原因是两个以上的事务加锁的记录的顺序不一致，因此解决关键是调整语句让加锁的记录的顺序一致即可</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Installing multiple Go versions</title>
    <url>/blog/2022/09/07/Installing-multiple-Go-versions/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>Usually, we install a specified version of golang sdk (such as go1.18.4). But we might want to install the other version for study or work purposes, and keep all the sdk versions in our computer.</p>
<span id="more"></span>

<h2 id="Assumption"><a href="#Assumption" class="headerlink" title="Assumption"></a>Assumption</h2><p>We have already installed go 1.18.4 in our computer, and we want to install 1.18.6 in the same time</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.18.4 linux/amd64</span><br></pre></td></tr></table></figure>

<p>Current GOROOT and GOPATH</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">env</span> GOROOT</span><br><span class="line">/usr/local/go</span><br><span class="line">$ go <span class="built_in">env</span> GOPATH</span><br><span class="line">/root/go</span><br></pre></td></tr></table></figure>

<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><h3 id="install-the-binary-file"><a href="#install-the-binary-file" class="headerlink" title="install the binary file"></a>install the binary file</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go install golang.org/dl/go1.18.6@latest</span><br><span class="line">go: downloading golang.org/dl v0.0.0-20220907140016-191c3420d549</span><br></pre></td></tr></table></figure>

<p>Try to call go1.18.6 by check its version:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go1.18.6 version</span><br><span class="line">go1.18.6: not downloaded. Run <span class="string">&#x27;go1.18.6 download&#x27;</span> to install to /root/sdk/go1.18.6</span><br></pre></td></tr></table></figure>

<p>Failed to check the version, but we can see go1.18.6 executable binary file has been download in our computer, let’s find out where it is:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> go1.18.6</span><br><span class="line">/root/go/bin/go1.18.6</span><br></pre></td></tr></table></figure>

<h3 id="Download-the-libaray"><a href="#Download-the-libaray" class="headerlink" title="Download the libaray"></a>Download the libaray</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go1.18.6 download</span><br><span class="line">Downloaded   0.0% (    16384 / 141879729 bytes) ...</span><br><span class="line">Downloaded   1.7% (  2375664 / 141879729 bytes) ...</span><br><span class="line">Downloaded   2.7% (  3817456 / 141879729 bytes) ...</span><br><span class="line">Downloaded   7.4% ( 10469376 / 141879729 bytes) ...</span><br><span class="line">Downloaded  16.7% ( 23658416 / 141879729 bytes) ...</span><br><span class="line">Downloaded  22.6% ( 32128880 / 141879729 bytes) ...</span><br><span class="line">Downloaded  23.4% ( 33144624 / 141879729 bytes) ...</span><br><span class="line">Downloaded  24.9% ( 35323648 / 141879729 bytes) ...</span><br><span class="line">Downloaded  29.9% ( 42368736 / 141879729 bytes) ...</span><br><span class="line">Downloaded  33.0% ( 46874304 / 141879729 bytes) ...</span><br><span class="line">Downloaded  35.5% ( 50364032 / 141879729 bytes) ...</span><br><span class="line">Downloaded  36.6% ( 51871424 / 141879729 bytes) ...</span><br><span class="line">Downloaded  38.2% ( 54148784 / 141879729 bytes) ...</span><br><span class="line">Downloaded  39.6% ( 56196800 / 141879729 bytes) ...</span><br><span class="line">Downloaded  42.9% ( 60849712 / 141879729 bytes) ...</span><br><span class="line">Downloaded  44.6% ( 63258144 / 141879729 bytes) ...</span><br><span class="line">Downloaded  47.1% ( 66895376 / 141879729 bytes) ...</span><br><span class="line">Downloaded  53.9% ( 76529088 / 141879729 bytes) ...</span><br><span class="line">Downloaded  56.4% ( 79953344 / 141879729 bytes) ...</span><br><span class="line">Downloaded  60.1% ( 85327232 / 141879729 bytes) ...</span><br><span class="line">Downloaded  62.0% ( 87981424 / 141879729 bytes) ...</span><br><span class="line">Downloaded  63.8% ( 90471760 / 141879729 bytes) ...</span><br><span class="line">Downloaded  64.6% ( 91684240 / 141879729 bytes) ...</span><br><span class="line">Downloaded  69.7% ( 98860304 / 141879729 bytes) ...</span><br><span class="line">Downloaded  77.7% (110263488 / 141879729 bytes) ...</span><br><span class="line">Downloaded  79.9% (113310928 / 141879729 bytes) ...</span><br><span class="line">Downloaded  81.4% (115457168 / 141879729 bytes) ...</span><br><span class="line">Downloaded  83.0% (117800128 / 141879729 bytes) ...</span><br><span class="line">Downloaded  83.5% (118488224 / 141879729 bytes) ...</span><br><span class="line">Downloaded  84.8% (120257680 / 141879729 bytes) ...</span><br><span class="line">Downloaded  87.9% (124697744 / 141879729 bytes) ...</span><br><span class="line">Downloaded  90.0% (127695936 / 141879729 bytes) ...</span><br><span class="line">Downloaded  95.4% (135412736 / 141879729 bytes) ...</span><br><span class="line">Downloaded  98.4% (139557856 / 141879729 bytes) ...</span><br><span class="line">Downloaded 100.0% (141879729 / 141879729 bytes)</span><br><span class="line">Unpacking /root/sdk/go1.18.6/go1.18.6.linux-amd64.tar.gz ...</span><br><span class="line">Success. You may now run <span class="string">&#x27;go1.18.6&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Now we have downloaded the library of go1.18.6 completely, let’s try to check its version again:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go1.18.6 version</span><br><span class="line">go version go1.18.6 linux/amd64</span><br></pre></td></tr></table></figure>
<p>And it works.</p>
<h3 id="Checkout-GOPATH-and-GOROOT"><a href="#Checkout-GOPATH-and-GOROOT" class="headerlink" title="Checkout GOPATH and GOROOT"></a>Checkout GOPATH and GOROOT</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go1.18.6 <span class="built_in">env</span> GOPATH</span><br><span class="line">/root/go</span><br><span class="line">$ go1.18.6 <span class="built_in">env</span> GOROOT</span><br><span class="line">/root/sdk/go1.18.6</span><br></pre></td></tr></table></figure>

<p>We can see GOPATH is the same as the go1.18.4, but GOROOT has changed to another place</p>
<h2 id="Uninstall-Addtional-Versions"><a href="#Uninstall-Addtional-Versions" class="headerlink" title="Uninstall Addtional Versions"></a>Uninstall Addtional Versions</h2><ol>
<li><p>Remove libaray</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /root/sdk/go1.18.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>Remove the binary file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /root/go/bin/go1.18.6</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://go.dev/doc/manage-install">Managing Go installations</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>installation</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群搭建实录</title>
    <url>/blog/2021/06/05/Kubernetes%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Kubernetes集群搭建实录"><a href="#Kubernetes集群搭建实录" class="headerlink" title="Kubernetes集群搭建实录"></a>Kubernetes集群搭建实录</h1><h2 id="环境与配置"><a href="#环境与配置" class="headerlink" title="环境与配置"></a>环境与配置</h2><ul>
<li>VMware® Workstation 15 Pro - 15.5.0 build-14665864</li>
<li>宿主机： Windows 10, 64-bit  (Build 19042) 10.0.19042</li>
<li>CentOS Linux release 7.9.2009 (Core)</li>
</ul>
<h2 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h2><ul>
<li>docker-ce-18.06.3.ce-3.el7</li>
<li>kubeadm-1.17.4-0</li>
<li>kubelet-1.17.4-0</li>
<li>kubectl-1.17.4-0</li>
<li>flannel:v0.14.0</li>
<li>metrics-server v0.3.6</li>
</ul>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>配置为CPU2核，内存2G，磁盘100G，网络选用NAT模式</p>
<h3 id="固定虚拟机IP"><a href="#固定虚拟机IP" class="headerlink" title="固定虚拟机IP"></a>固定虚拟机IP</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-env33</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot;	# 将虚拟机的地址获取改为静态</span><br><span class="line">ONBOOT=&quot;yes&quot;		# </span><br><span class="line">IPADDR=192.168.1.210	# 前三段与VMnet8的ip中的第三段保持一致，第四段为自定义</span><br><span class="line">GATEWAY=192.168.1.2		# 与VMnet8的gateway保持一致</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=8.8.8.8i</span><br></pre></td></tr></table></figure>
<p>配置域名解析</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>

<p>生效配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>



<h3 id="关闭与禁用防火墙"><a href="#关闭与禁用防火墙" class="headerlink" title="关闭与禁用防火墙"></a>关闭与禁用防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> 关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"> 禁用防火墙</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p>关闭<code>Selinux</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>



<h3 id="配置自定义域名解析"><a href="#配置自定义域名解析" class="headerlink" title="配置自定义域名解析"></a>配置自定义域名解析</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.1.210 k8smaster</span><br><span class="line">192.168.1.211 k8sworker1</span><br><span class="line">192.168.1.212 k8sworker2</span><br></pre></td></tr></table></figure>



<h3 id="禁用swap分区"><a href="#禁用swap分区" class="headerlink" title="禁用swap分区"></a>禁用swap分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure>

<p>注释掉该行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br></pre></td></tr></table></figure>



<h3 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>

<p>重新加载配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>加载网桥过滤模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure>

<p>查看网桥过滤模块是否成功加载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod | grep br_netfilter</span><br></pre></td></tr></table></figure>





<h3 id="更换yum镜像源"><a href="#更换yum镜像源" class="headerlink" title="更换yum镜像源"></a>更换yum镜像源</h3><p>安装wget</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure>

<p>备份原有的yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo 	 /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>

<p>安装阿里源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<p>清理旧缓存并生成新缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<p>升级yun</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure>





<h3 id="安装chrony"><a href="#安装chrony" class="headerlink" title="安装chrony"></a>安装chrony</h3><p>chrony是用于将本机时间与网络同步的软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y chrony</span><br></pre></td></tr></table></figure>

<p> 启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start chronyd</span><br><span class="line">systemctl enable chronyd</span><br></pre></td></tr></table></figure>



<h3 id="配置ipvs"><a href="#配置ipvs" class="headerlink" title="配置ipvs"></a>配置ipvs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install ipset ipvsadm -y</span><br></pre></td></tr></table></figure>

<p>添加需要加载的模块写入脚本文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>为脚本文件添加执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/bash /etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure>

<p>查看对应模块是否加载成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>



<h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><p>克隆按照上述配置的虚拟机两台，分别锁定ip为192.168.1.211和192.168.1.212，这两台将作为子节点</p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><blockquote>
<p>此步骤需要三台虚拟机同时执行</p>
<p>本次安装的docker版本为18.06.3-ce，配合上面安装的Kubernetes组件1.17.4版本，如果选用最新版的docker可能会报版本未经校验的错误</p>
</blockquote>
<p>移除系统残留的docker相关内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br></pre></td></tr></table></figure>

<p>添加yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>安装docker，启动并设置开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install --setopt=obsoletes=0 docker-ce-18.06.3.ce-3.el7 -y</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>





<h3 id="安装kubernetes组件"><a href="#安装kubernetes组件" class="headerlink" title="安装kubernetes组件"></a>安装kubernetes组件</h3><blockquote>
<p>此步骤需要三台虚拟机同时执行</p>
</blockquote>
<p>更新yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/kubernetes.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/rpm-package-key.gpg</span><br></pre></td></tr></table></figure>

<p>安装kubeadm，kubelet，kubectl</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y</span><br></pre></td></tr></table></figure>

<p>配置kubelet的cgroup</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/kubelet</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span><br><span class="line">KUBE_PROXY_MODE=&quot;ipvs&quot;</span><br></pre></td></tr></table></figure>

<p>设置kubelet开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure>



<h3 id="安装kubernetes镜像集群"><a href="#安装kubernetes镜像集群" class="headerlink" title="安装kubernetes镜像集群"></a>安装kubernetes镜像集群</h3><p>注意，国内无法访问官方的镜像仓库，需要使用阿里的镜像仓库，下载后将内容标签更改为官方仓库的镜像的标签</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/pull.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">images=(</span><br><span class="line">  kube-apiserver:v1.17.4</span><br><span class="line">  kube-controller-manager:v1.17.4</span><br><span class="line">  kube-scheduler:v1.17.4</span><br><span class="line">  kube-proxy:v1.17.4</span><br><span class="line">  pause:3.1</span><br><span class="line">  etcd:3.4.3-0</span><br><span class="line">  coredns:1.6.5</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for i in $&#123;images[@]&#125;; do </span><br><span class="line">  imageName=$&#123;i#k8s.gcr.io/&#125;</span><br><span class="line">  docker pull registry.aliyuncs.com/google_containers/$imageName</span><br><span class="line">  docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi registry.aliyuncs.com/google_containers/$imageName</span><br><span class="line">done;</span><br></pre></td></tr></table></figure>

<p>执行下载镜像的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh ~/pull.sh</span><br></pre></td></tr></table></figure>



<h3 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h3><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><p>在master节点上执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.17.4 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=192.168.1.210</span><br></pre></td></tr></table></figure>



<p>看到以下内容时说明安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.1.210:6443 --token ltbp0b.ytq5v8tpgwlbmrah \</span><br><span class="line">	--discovery-token-ca-cert-hash sha256:afe539eb3fbf77fa066f085fb49ed68dbb750b85ad7a3636d0d01532bd94d093 </span><br></pre></td></tr></table></figure>



<p>安装完成后，执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>



<h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p>在node节点上执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.1.210:6443 --token ltbp0b.ytq5v8tpgwlbmrah \</span><br><span class="line">	--discovery-token-ca-cert-hash sha256:afe539eb3fbf77fa066f085fb49ed68dbb750b85ad7a3636d0d01532bd94d093</span><br></pre></td></tr></table></figure>

<p>执行完毕后，node节点便加入master中</p>
<p>此时在master节点查看所有节点会看到两个worker已经加入master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get nodes</span><br><span class="line">NAME         STATUS     ROLES    AGE     VERSION</span><br><span class="line">k8smaster    NotReady   master   4m27s   v1.17.4</span><br><span class="line">k8sworker1   NotReady   &lt;none&gt;   7s      v1.17.4</span><br><span class="line">k8sworker2   NotReady   &lt;none&gt;   7s      v1.17.4</span><br></pre></td></tr></table></figure>



<h3 id="安装网络插件kube-flannel"><a href="#安装网络插件kube-flannel" class="headerlink" title="安装网络插件kube-flannel"></a>安装网络插件kube-flannel</h3><blockquote>
<p>本操作仅需在master节点上执行</p>
</blockquote>
<p>创建文件<code>kube-flannel.yaml</code></p>
<p>编辑写入以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodSecurityPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">psp.flannel.unprivileged</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/defaultProfileName:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span> <span class="string">runtime/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/defaultProfileName:</span> <span class="string">runtime/default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">configMap</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">secret</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">emptyDir</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hostPath</span></span><br><span class="line">  <span class="attr">allowedHostPaths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/etc/cni/net.d&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/etc/kube-flannel&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/run/flannel&quot;</span></span><br><span class="line">  <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Users and groups</span></span><br><span class="line">  <span class="attr">runAsUser:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">supplementalGroups:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">fsGroup:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="comment"># Privilege Escalation</span></span><br><span class="line">  <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">defaultAllowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Capabilities</span></span><br><span class="line">  <span class="attr">allowedCapabilities:</span> [<span class="string">&#x27;NET_ADMIN&#x27;</span>, <span class="string">&#x27;NET_RAW&#x27;</span>]</span><br><span class="line">  <span class="attr">defaultAddCapabilities:</span> []</span><br><span class="line">  <span class="attr">requiredDropCapabilities:</span> []</span><br><span class="line">  <span class="comment"># Host namespaces</span></span><br><span class="line">  <span class="attr">hostPID:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostIPC:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostPorts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">min:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">max:</span> <span class="number">65535</span></span><br><span class="line">  <span class="comment"># SELinux</span></span><br><span class="line">  <span class="attr">seLinux:</span></span><br><span class="line">    <span class="comment"># SELinux is unused in CaaSP</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">&#x27;RunAsAny&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&#x27;extensions&#x27;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&#x27;podsecuritypolicies&#x27;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&#x27;use&#x27;</span>]</span><br><span class="line">  <span class="attr">resourceNames:</span> [<span class="string">&#x27;psp.flannel.unprivileged&#x27;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;cbr0&quot;,</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;plugins&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;flannel&quot;,</span></span><br><span class="line"><span class="string">          &quot;delegate&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;hairpinMode&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;isDefaultGateway&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;portmap&quot;,</span></span><br><span class="line"><span class="string">          &quot;capabilities&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;portMappings&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span></span><br><span class="line"><span class="string">      &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/os</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-node-critical</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.14.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.14.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span> [<span class="string">&quot;NET_ADMIN&quot;</span>, <span class="string">&quot;NET_RAW&quot;</span>]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br></pre></td></tr></table></figure>

<p>执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yaml</span><br></pre></td></tr></table></figure>

<p>一分钟左右之后，查看集群节点状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get nodes</span><br><span class="line">NAME         STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8smaster    Ready    master   13m     v1.17.4</span><br><span class="line">k8sworker1   Ready    &lt;none&gt;   8m41s   v1.17.4</span><br><span class="line">k8sworker2   Ready    &lt;none&gt;   8m41s   v1.17.4</span><br></pre></td></tr></table></figure>

<p>可以看到，三个节点的状态都是ready了</p>
<h3 id="安装HPA"><a href="#安装HPA" class="headerlink" title="安装HPA"></a>安装HPA</h3><p>安装Horizontal Pod Autoscaler(HPA)，用于管理pods的弹性伸缩的组件</p>
<p>克隆组件仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b v0.3.6 https://github.com/kubernetes-sigs/metrics-server.git</span><br></pre></td></tr></table></figure>

<p>修改<code>metrics-server/deploy/1.8+/metrics-server-deployment.yaml</code>为以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">metrics-server</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure>

<p>部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/metrics-server/deploy/1.8+</span><br><span class="line">kubectl apply -f ./</span><br></pre></td></tr></table></figure>

<p>测试是否安装成功（安装完稍等几分钟等待数据同步）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl top nodes</span><br></pre></td></tr></table></figure>

<p>若能正常显示资源占用情况，即安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8smaster 1.8+]# kubectl top nodes</span><br><span class="line">NAME         CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">k8smaster    128m         6%     1037Mi          60%       </span><br><span class="line">k8sworker1   44m          2%     591Mi           34%       </span><br><span class="line">k8sworker2   51m          2%     595Mi           34% </span><br></pre></td></tr></table></figure>



<h3 id="安装Ingress-Nginx"><a href="#安装Ingress-Nginx" class="headerlink" title="安装Ingress-Nginx"></a>安装Ingress-Nginx</h3><p>ingress-nginx是kubernetes做反向代理的一个组件</p>
<p>创建一个文件夹，并进入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/ingress-nginx</span><br><span class="line">cd ~/ingress-nginx</span><br></pre></td></tr></table></figure>

<p>在该文件夹下创建两个文件：</p>
<p>mandatory.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-configuration</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">udp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="comment"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span></span><br><span class="line">      <span class="comment"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ingress-controller-leader-nginx&quot;</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role-nisa-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole-nisa-binding</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">prometheus.io/port:</span> <span class="string">&quot;10254&quot;</span></span><br><span class="line">        <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># wait up to five minutes for the drain of connections</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--annotations-prefix=nginx.ingress.kubernetes.io</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="comment"># www-data -&gt; 101</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">min:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Container</span></span><br></pre></td></tr></table></figure>

<p>service-nodeport.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure>

<p>执行两个配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./</span><br></pre></td></tr></table></figure>

<p>查看对应的pod和service有没有创建成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8smaster practice]# kubectl get pods -n ingress-nginxNAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-7f74f657bd-tcz5n   1/1     Running   0          78s</span><br><span class="line"></span><br><span class="line">[root@k8smaster practice]# kubectl get svc -n ingress-nginx</span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.110.29.232   &lt;none&gt;        80:30930/TCP,443:31432/TCP   112s</span><br></pre></td></tr></table></figure>



<p>自此，集群已经完全搭建完毕</p>
<h2 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h2><p>测试集群是否正常运行</p>
<p>在集群中部署一个Nginx服务</p>
<h3 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl create deployment nginx --image=nginx:1.14-alpine</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"></span><br><span class="line">[root@k8smaster ~]# kubectl get pods</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-65c4bffcb6-knp2d   1/1     Running   0          15s</span><br></pre></td></tr></table></figure>



<h3 id="暴露端口"><a href="#暴露端口" class="headerlink" title="暴露端口"></a>暴露端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">service/nginx exposed</span><br><span class="line"></span><br><span class="line">[root@k8smaster ~]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        41m</span><br><span class="line">nginx        NodePort    10.103.157.11   &lt;none&gt;        80:31298/TCP   43s</span><br></pre></td></tr></table></figure>

<p>其中nginx的port中的80:31298表示对集群外暴露的端口问31298</p>
<p>回到Windows宿主机，访问192.168.1.210:31298，如果可以获取到nginx的主页，则表示部署成功了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Yuki&gt;curl 192.168.1.210:31298</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实现反向代理</title>
    <url>/blog/2021/05/23/Nginx%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>在虚拟机中部署Nginx，并使用Nginx为虚拟机中运行的项目分配反向代理的域名</p>
<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>在windows宿主机中存在一台运行着CentOS7的虚拟机，ip为192.168.1.200</p>
<p>在虚拟机中存在一个web服务的项目，运行在虚拟机的端口8080上</p>
<p>希望在宿主机中能通过自定义的域名app01.com来访问该项目的接口服务</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>CentOS Linux release 7.7.1908 (Core)</li>
<li>VMWare 15.5.0 build-14665864</li>
<li>Windows 10, 64-bit  (Build 19042) 10.0.19042</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="修改windows宿主机中的hosts文件"><a href="#修改windows宿主机中的hosts文件" class="headerlink" title="修改windows宿主机中的hosts文件"></a>修改windows宿主机中的hosts文件</h3><p>hosts文件位于：<code>C:\Windows\System32\drivers\etc\hosts</code></p>
<p>在hosts文件中添加自定义的域名-ip映射关系</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.1.200 app01.com</span><br></pre></td></tr></table></figure>



<h3 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h3><h4 id="通过yum安装"><a href="#通过yum安装" class="headerlink" title="通过yum安装"></a>通过yum安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>



<h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@playground nginx]# nginx -v</span><br><span class="line">nginx version: nginx/1.16.1</span><br></pre></td></tr></table></figure>



<h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><h4 id="添加自定义反向代理配置"><a href="#添加自定义反向代理配置" class="headerlink" title="添加自定义反向代理配置"></a>添加自定义反向代理配置</h4><p>通过<code>yum</code>进行安装时，<code>Nginx</code>的配置文件的路径会位于<code>/etc/nginx</code>下</p>
<p>配置文件是<code>/etc/nginx/nginx.conf</code></p>
<p>我们在更改该文件之前先对其进行一下备份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup</span><br></pre></td></tr></table></figure>



<p>然后添加我们自定义的服务配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  app01.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>

<p>停止nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>

<p>修改配置后重启Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>让Nginx开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>



<p>自此，运行在虚拟机中端口为8080的项目已经成功被Nginx反向代理</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在windows宿主机的cmd中尝试请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\xxx&gt;curl http://app01.com/api/organization</span><br><span class="line">&#123;&quot;code&quot;:200,&quot;data&quot;:[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Oppose Militancy \u0026 Neutralize Invasion&quot;,&quot;alias&quot;:&quot;O.M.N.I&quot;,&quot;pilot&quot;:[&#123;&quot;id&quot;:6,&quot;name&quot;:&quot;Stellar Loussier&quot;,&quot;organizationId&quot;:1,&quot;organization&quot;:&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;pilot&quot;:null&#125;,&quot;Gundam&quot;:null&#125;]&#125;,&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Zodiac Alliance of Freedom Treaty&quot;,&quot;alias&quot;:&quot;Z.A.F.T&quot;,&quot;pilot&quot;:[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Shinn Asuka&quot;,&quot;organizationId&quot;:2,&quot;organization&quot;:&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;pilot&quot;:null&#125;,&quot;Gundam&quot;:null&#125;,&#123;&quot;id&quot;:4,&quot;name&quot;:&quot;Rau Le Crueset&quot;,&quot;organizationId&quot;:2,&quot;organization&quot;:&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;pilot&quot;:null&#125;,&quot;Gundam&quot;:null&#125;,&#123;&quot;id&quot;:5,&quot;name&quot;:&quot;Rey Za Burrel&quot;,&quot;organizationId&quot;:2,&quot;organization&quot;:&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;pilot&quot;:null&#125;,&quot;Gundam&quot;:null&#125;]&#125;,&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;Orb Union&quot;,&quot;alias&quot;:&quot;O.R.B&quot;,&quot;pilot&quot;:[&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Kira Yamato&quot;,&quot;organizationId&quot;:3,&quot;organization&quot;:&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;pilot&quot;:null&#125;,&quot;Gundam&quot;:null&#125;,&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;Athrun Zala&quot;,&quot;organizationId&quot;:3,&quot;organization&quot;:&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;pilot&quot;:null&#125;,&quot;Gundam&quot;:null&#125;,&#123;&quot;id&quot;:7,&quot;name&quot;:&quot;Mu La Flaga&quot;,&quot;organizationId&quot;:3,&quot;organization&quot;:&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;pilot&quot;:null&#125;,&quot;Gundam&quot;:null&#125;]&#125;],&quot;message&quot;:&quot;Get organization successfully.&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>发现能成功通过我们配置的域名app01.com来请求到数据</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs安装</title>
    <url>/blog/2021/06/09/Nodejs%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Nodejs安装"><a href="#Nodejs安装" class="headerlink" title="Nodejs安装"></a>Nodejs安装</h1><h2 id="环境与配置"><a href="#环境与配置" class="headerlink" title="环境与配置"></a>环境与配置</h2><ul>
<li>VMware® Workstation 15 Pro - 15.5.0 build-14665864</li>
<li>宿主机： Windows 10, 64-bit  (Build 19042) 10.0.19042</li>
<li>CentOS Linux release 7.9.2009 (Core)</li>
</ul>
<h2 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h2><ul>
<li>node-v12.16.1-linux-x64</li>
<li>n 7.3.0</li>
</ul>
<span id="more"></span>


<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/packages</span><br><span class="line">wget https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>



<h2 id="解压与安装"><a href="#解压与安装" class="headerlink" title="解压与安装"></a>解压与安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/modules</span><br><span class="line">tar -C . -zxvf /opt/packages/node-v12.16.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>



<h2 id="设置软连接"><a href="#设置软连接" class="headerlink" title="设置软连接"></a>设置软连接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /opt/modules/node-v12.16.1-linux-x64/bin/node /usr/bin/node</span><br><span class="line">ln -s /opt/modules/node-v12.16.1-linux-x64/bin/npm /usr/bin/npm</span><br><span class="line">ln -s /opt/modules/node-v12.16.1-linux-x64/bin/npx /usr/bin/npx</span><br></pre></td></tr></table></figure>



<h2 id="安装node版本管理器n"><a href="#安装node版本管理器n" class="headerlink" title="安装node版本管理器n"></a>安装node版本管理器n</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g n</span><br></pre></td></tr></table></figure>

<h3 id="设置软连接-1"><a href="#设置软连接-1" class="headerlink" title="设置软连接"></a>设置软连接</h3><p>ps：不知道为啥全局安装之后n没有自己创建个软连接啥的….总觉得以前不用做这一步….</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /opt/modules/node-v12.16.1-linux-x64/lib/node_modules/n/bin/n /usr/bin/n</span><br></pre></td></tr></table></figure>

<h3 id="设置N-PREFIX"><a href="#设置N-PREFIX" class="headerlink" title="设置N_PREFIX"></a>设置N_PREFIX</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export N_PREFIX=/usr/local/bin/node</span><br><span class="line">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>



<h3 id="测试n是否安装成功"><a href="#测试n是否安装成功" class="headerlink" title="测试n是否安装成功"></a>测试n是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n --version</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7.3.0</span><br></pre></td></tr></table></figure>



<h2 id="安装生产环境版本node"><a href="#安装生产环境版本node" class="headerlink" title="安装生产环境版本node"></a>安装生产环境版本node</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n 12.2.0</span><br></pre></td></tr></table></figure>

<p>切换node</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure>

<p>然后选择需要的版本，enter</p>
<h2 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node模块机制</title>
    <url>/blog/2020/07/25/Node%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="模块机制"><a href="#模块机制" class="headerlink" title="模块机制"></a>模块机制</h2><p>Node的模块是在<a href="http://www.commonjs.org/">CommonJs</a>的基础上对模块的规范进行了一定的取舍，再结合自身特性的需求去实现的。</p>
<span id="more"></span>

<h3 id="模块标识符分类"><a href="#模块标识符分类" class="headerlink" title="模块标识符分类"></a>模块标识符分类</h3><ol>
<li>核心模块</li>
<li>相对路径的文件模块</li>
<li>绝对路径的文件模块</li>
<li>非路径形式的文件模块（自定义模块）</li>
</ol>
<h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><h4 id="模块路径"><a href="#模块路径" class="headerlink" title="模块路径"></a>模块路径</h4><p>模块路径是Node在定位文件模块的具体文件时制定的一个查找策略，我们可以通过以下方法查看对于一个文件而言的一个具体的模块路径：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">paths</span>);</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#x27;/root/Project/node_practice/demo01/node_modules&#x27;,</span><br><span class="line">  &#x27;/root/Project/node_practice/node_modules&#x27;,</span><br><span class="line">  &#x27;/root/Project/node_modules&#x27;,</span><br><span class="line">  &#x27;/root/node_modules&#x27;,</span><br><span class="line">  &#x27;/node_modules&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>上面的数组表示自定义模块的查找顺序，若在某一层找到了需要的模块便进行编译与加载，停止查找。但是这种递归扫描式的查找方式是最为费时的。</p>
<h4 id="非路径的文件模块的查找顺序"><a href="#非路径的文件模块的查找顺序" class="headerlink" title="非路径的文件模块的查找顺序"></a>非路径的文件模块的查找顺序</h4><blockquote>
<p>下面的流程假定我们想导入的模块名称叫md</p>
</blockquote>
<p><img src="/blog/2020/07/25/Node%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/image-20200803230816443.png" alt="image-20200803230816443"></p>
<h4 id="exports和module-exports的区别"><a href="#exports和module-exports的区别" class="headerlink" title="exports和module.exports的区别"></a>exports和module.exports的区别</h4><p>在Node中，每个文件模块都是一个对象，每个文件本身都带有一个Module对象，Module对象的内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myModule.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Node demo01]# node myModule.js </span><br><span class="line">Module &#123;</span><br><span class="line">  id: &#x27;.&#x27;,</span><br><span class="line">  path: &#x27;/root/Project/node_practice/demo01&#x27;,</span><br><span class="line">  exports: &#123;&#125;,</span><br><span class="line">  parent: null,</span><br><span class="line">  filename: &#x27;/root/Project/node_practice/demo01/myModule.js&#x27;,</span><br><span class="line">  loaded: false,</span><br><span class="line">  children: [],</span><br><span class="line">  paths: [</span><br><span class="line">    &#x27;/root/Project/node_practice/demo01/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/Project/node_practice/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/Project/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/node_modules&#x27;,</span><br><span class="line">    &#x27;/node_modules&#x27;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当我们使用exports.xx时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myModule.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">b</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Node demo01]# node myModule.js </span><br><span class="line">Module &#123;</span><br><span class="line">  id: &#x27;.&#x27;,</span><br><span class="line">  path: &#x27;/root/Project/node_practice/demo01&#x27;,</span><br><span class="line">  exports: &#123; a: 123, b: [Function] &#125;,</span><br><span class="line">  parent: null,</span><br><span class="line">  filename: &#x27;/root/Project/node_practice/demo01/myModule.js&#x27;,</span><br><span class="line">  loaded: false,</span><br><span class="line">  children: [],</span><br><span class="line">  paths: [</span><br><span class="line">    &#x27;/root/Project/node_practice/demo01/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/Project/node_practice/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/Project/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/node_modules&#x27;,</span><br><span class="line">    &#x27;/node_modules&#x27;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从控制台结果可以看到，我们使用exports.xx时，会在Module对象的exports对象中添加相应的对象，而其它文件调用该模块时则是获得exports这个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myModule2.js</span></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./myModule&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myModule);	<span class="comment">// &#123; a: 123, b: [Function] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myModule.<span class="property">a</span>);	<span class="comment">// 123</span></span><br><span class="line">myModule.<span class="title function_">b</span>();				<span class="comment">// 123</span></span><br></pre></td></tr></table></figure>



<p>当我们使用module.exports时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myModule.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">c</span> = &#123; <span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: [<span class="title class_">Function</span>] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">d</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Module &#123;</span><br><span class="line">  id: &#x27;.&#x27;,</span><br><span class="line">  path: &#x27;/root/Project/node_practice/demo01&#x27;,</span><br><span class="line">  exports: [Function],</span><br><span class="line">  parent: null,</span><br><span class="line">  filename: &#x27;/root/Project/node_practice/demo01/myModule.js&#x27;,</span><br><span class="line">  loaded: false,</span><br><span class="line">  children: [],</span><br><span class="line">  paths: [</span><br><span class="line">    &#x27;/root/Project/node_practice/demo01/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/Project/node_practice/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/Project/node_modules&#x27;,</span><br><span class="line">    &#x27;/root/node_modules&#x27;,</span><br><span class="line">    &#x27;/node_modules&#x27;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从控制台结果我们可以看到，使用module.exports时是将exports对象完全覆盖，并且之后使用exports.xx是不会被写入exports对象的，使用module.exports可以直接使得模块输出一个构造函数（类）</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node版本管理工具nvm与Node镜像源管理工具nrm的安装与配置</title>
    <url>/blog/2019/11/09/Node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nvm%E4%B8%8ENode%E9%95%9C%E5%83%8F%E6%BA%90%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nrm%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="nvm安装与配置"><a href="#nvm安装与配置" class="headerlink" title="nvm安装与配置"></a>nvm安装与配置</h3><ul>
<li><p>安装</p>
<ol>
<li><p>Windows</p>
<p>下载<a href="https://github.com/coreybutler/nvm-windows/releases">nvm</a>（下载nvm-setup.zip即可），下载完成后在本地解压，运行安装即可</p>
</li>
</ol>
</li>
</ul>
<span id="more"></span>
<ol start="2">
<li><p>Unix类的系统</p>
<p>我太懒了…..大家参考<a href="https://github.com/nvm-sh/nvm">官方说明</a>吧 _(:з)∠)_，然后补充一个事情，就是<code>curl</code>和<code>wget</code>这两个最简单的安装方式我这边一直要么下载失败要么请求木有相应…..反正最后我是用git安装成功的QAQ…..</p>
</li>
</ol>
<ul>
<li><p>配置Node.js</p>
<ol>
<li><p><code>nvm list</code></p>
<p>会列出当前环境下已安装的Node.js的版本，版本号前带星号<code>*</code>即为当前使用版本</p>
</li>
<li><p><code>nvm install &lt;version&gt;</code></p>
<p>安装指定的版本的Node.js</p>
</li>
<li><p><code>nvm use &lt;version&gt;</code></p>
<p>指定当前环境下使用的Node.js的版本</p>
</li>
</ol>
</li>
</ul>
<h3 id="nrm安装与配置"><a href="#nrm安装与配置" class="headerlink" title="nrm安装与配置"></a>nrm安装与配置</h3><ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g nrm</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看，更改镜像源</p>
<ol>
<li><p>查看当前使用的镜像源（带<code>*</code>的为当前使用镜像）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改镜像源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nrm use &lt;registry&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>镜像源测速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nrm test</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Installation</title>
    <url>/blog/2022/09/20/Rust-Installation/</url>
    <content><![CDATA[<p>via rustup</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<blockquote>
<p>all options was set to default</p>
</blockquote>
<p>Ensure <code>$HOME/.cargo/bin</code> was added in envirement variable <code>$PATH</code></p>
<ul>
<li>reboot machine;</li>
<li>execute <code>source ~/.profile</code> manually;</li>
</ul>
<p>Check you rustc and cargo version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rustc --version</span><br><span class="line">rustc 1.63.0 (4b91a6ea7 2022-08-08)</span><br><span class="line">$ cargo --version</span><br><span class="line">cargo 1.63.0 (fd9c4297c 2022-07-01)</span><br></pre></td></tr></table></figure>

<h2 id="Plugins-in-VSCode"><a href="#Plugins-in-VSCode" class="headerlink" title="Plugins in VSCode"></a>Plugins in VSCode</h2><ul>
<li>rust-analyzer</li>
<li>Better TOML</li>
<li>Microsoft C++</li>
<li>CodeLLDB</li>
</ul>
<h2 id="Auto-Formatting-On-Save"><a href="#Auto-Formatting-On-Save" class="headerlink" title="Auto Formatting On Save"></a>Auto Formatting On Save</h2><ol>
<li>Open <code>File-&gt;Perferences-&gt;Settings</code>(or using hot key <code>Ctrl + ,</code>)</li>
<li>Search and select option: “Editor: Format On Save”</li>
<li>Turn on this option</li>
</ol>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><blockquote>
<p>make sure plugins <code>Microsoft C++</code> and <code>CodeLLDB</code> was installed</p>
</blockquote>
<p>config <code>&lt;cargo project root dir&gt;/.vscode/launch.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;lldb&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Debug executable &#x27;greeting&#x27;&quot;,</span><br><span class="line">            &quot;cargo&quot;: &#123;</span><br><span class="line">                &quot;args&quot;: [</span><br><span class="line">                    &quot;build&quot;,</span><br><span class="line">                    &quot;--bin=greeting&quot;,</span><br><span class="line">                    &quot;--package=greeting&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;filter&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;greeting&quot;,</span><br><span class="line">                    &quot;kind&quot;: &quot;bin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;lldb&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Debug unit tests in executable &#x27;greeting&#x27;&quot;,</span><br><span class="line">            &quot;cargo&quot;: &#123;</span><br><span class="line">                &quot;args&quot;: [</span><br><span class="line">                    &quot;test&quot;,</span><br><span class="line">                    &quot;--no-run&quot;,</span><br><span class="line">                    &quot;--bin=greeting&quot;,</span><br><span class="line">                    &quot;--package=greeting&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;filter&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;greeting&quot;,</span><br><span class="line">                    &quot;kind&quot;: &quot;bin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then we can debug project by pressing F5</p>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>installation</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome下配置谷歌访问助手</title>
    <url>/blog/2019/10/30/chrome%E4%B8%8B%E9%85%8D%E7%BD%AE%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/</url>
    <content><![CDATA[<h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><ul>
<li>Win10</li>
<li>Version 78.0.3904.70 (Official Build) (64-bit)</li>
<li>谷歌浏览助手v2.3.0</li>
</ul>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><span id="more"></span>
<ol>
<li>打开 <code>chrome://extensions/</code>， 勾选<strong>开发者模式</strong></li>
<li>将谷歌浏览助手中的<code>.crx</code>文件的后缀名直接改为<code>.zip</code></li>
<li>将<code>.zip</code>文件直接拖入<code>chrome://extensions/</code>的页面中，浏览器会自动配置该插件</li>
<li>更改打卡浏览器时默认进入的网址<code>http://www.hao123.com/</code></li>
<li>完成配置</li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>谷歌访问助手</tag>
      </tags>
  </entry>
  <entry>
    <title>exceljs的使用记录</title>
    <url>/blog/2019/11/23/exceljs%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>最近在写公司的员工管理系统的后台，有个蛋疼需求是员工在填写工作记录的时候不肯乖乖到系统里面填非要先写到excel的<code>xlsx</code>里然后把<code>xlsx</code>传上去（MDZZ…..），在处理excel部分的内容的时候使用了一个强大的excel处理插件<a href="https://github.com/exceljs/exceljs">exceljs</a>，记录一下自己在使用这个插件的过程中遇到的一些问题以及解决方法。</p>
<span id="more"></span>
<h2 id="无法通过流的形式读取到xlsx文件"><a href="#无法通过流的形式读取到xlsx文件" class="headerlink" title="无法通过流的形式读取到xlsx文件"></a>无法通过流的形式读取到<code>xlsx</code>文件</h2><p>这个问题…..其实还在Readme的Backlog里面…..也就是还带完善，除非自己去把它完善了_(:з)∠)_，否则目前还是用不了的…..</p>
<p>所以我们只能采用绕圈子的方式了，第一种方法是直接上传的时候把<code>xlsx</code>传到服务器中，然后用<code>workbook.xlsx.readFile(filename)</code>这个方法去读取文件对象，但是这种操作方法本人觉得要占服务器的存储，一点也不优雅…..</p>
<p>第二种方法是我们依然是以流的方式获得<code>xlsx</code>的内容，然后把流直接转换为buffer，然后通过<code>workbook.xlsx.load(buffer)</code>来获取内容（亲测有效~），具体实现如下：</p>
<ol>
<li><p>我们先创建一个stream转buffer的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app/extend/helper.js</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="title function_">streamToBuffer</span>(<span class="params">stream</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> buffers = [];</span><br><span class="line">          stream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, reject);</span><br><span class="line">          stream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> buffers.<span class="title function_">push</span>(data));</span><br><span class="line">          stream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers)));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个controller来读取buffer里的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app/controller/upload.js</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Excel</span> = <span class="built_in">require</span>(<span class="string">&#x27;exceljs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 获取前端传回来的（单个）文件流</span></span><br><span class="line">    <span class="keyword">const</span> stream = <span class="keyword">await</span> ctx.<span class="title function_">getFileStream</span>();</span><br><span class="line">    <span class="comment">// 将stream转换为buffer</span></span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="keyword">await</span> ctx.<span class="property">helper</span>.<span class="title function_">streamToBuffer</span>(stream);</span><br><span class="line">    <span class="comment">// 读取buffer的内容，并返回给前端  </span></span><br><span class="line">    <span class="keyword">const</span> workbook = <span class="keyword">new</span> <span class="title class_">Excel</span>.<span class="title class_">Workbook</span>();</span><br><span class="line">    <span class="keyword">await</span> workbook.<span class="property">xlsx</span>.<span class="title function_">load</span>(buffer);</span><br><span class="line">    <span class="keyword">const</span> worksheet = workbook.<span class="title function_">getWorksheet</span>(<span class="string">&#x27;Sheet1&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = worksheet.<span class="title function_">getColumn</span>(<span class="number">1</span>).<span class="property">values</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UploadController</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样我们就能获得前端传回来的<code>xlsx</code>的内容然后进行进一步验证和写入数据库的操作啦~（还是想吐槽一些同事玛德excel真的就这么好用吗QAQ）</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>gRPC的四种通信模式</title>
    <url>/blog/2022/04/01/grpc%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="简单RPC"><a href="#简单RPC" class="headerlink" title="简单RPC"></a>简单RPC</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>客户端发送一个请求，然后等待服务端的一次响应</p>
</blockquote>
<span id="more"></span>

<h3 id="protobuffer-定义"><a href="#protobuffer-定义" class="headerlink" title="protobuffer 定义"></a>protobuffer 定义</h3><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">DemoService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SimpleMode(SimpleModeRequest) <span class="keyword">returns</span> (SimpleModeReply) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SimpleModeRequest</span> &#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SimpleModeReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> messgae = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="服务端实现模板"><a href="#服务端实现模板" class="headerlink" title="服务端实现模板"></a>服务端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DemoService)</span></span> SimpleMode(ctx context.Context, in *demo.SimpleModeRequest) (*demo.SimpleModeReply, <span class="type">error</span>) &#123;</span><br><span class="line">	data := s.data[in.Id]</span><br><span class="line">	<span class="keyword">return</span> &amp;demo.SimpleModeReply&#123;</span><br><span class="line">		Messgae: data,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端实现模板"><a href="#客户端实现模板" class="headerlink" title="客户端实现模板"></a>客户端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoClient)</span></span> SimpleMode(ctx context.Context) &#123;</span><br><span class="line">	reply, err := c.c.SimpleMode(ctx, &amp;demo.SimpleModeRequest&#123;Id: <span class="number">10</span>&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;SimpleMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;SimpleMode Result: %v&quot;</span>, reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="服务端流模式"><a href="#服务端流模式" class="headerlink" title="服务端流模式"></a>服务端流模式</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>客户端发送一次请求，服务端持续发送多个响应，客户端持续读取多个响应直到没有响应为止</p>
</blockquote>
<h3 id="protobuffer-定义-1"><a href="#protobuffer-定义-1" class="headerlink" title="protobuffer 定义"></a>protobuffer 定义</h3><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">DemoService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> ServerSideStreamMode(ServerSideStreamModeRequest) <span class="keyword">returns</span> (stream ServerSideStreamModeReply) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ServerSideStreamModeRequest</span> &#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ServerSideStreamModeReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端实现模板-1"><a href="#服务端实现模板-1" class="headerlink" title="服务端实现模板"></a>服务端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DemoService)</span></span> ServerSideStreamMode(in *demo.ServerSideStreamModeRequest, stream demo.DemoService_ServerSideStreamModeServer) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := in.Id; i &lt; <span class="type">int32</span>(<span class="built_in">len</span>(s.data)) &amp;&amp; i &lt; in.Id+<span class="number">20</span>; i += <span class="number">2</span> &#123;</span><br><span class="line">		data := s.data[i]</span><br><span class="line">		<span class="keyword">if</span> err := stream.Send(&amp;demo.ServerSideStreamModeReply&#123;</span><br><span class="line">			Message: data,</span><br><span class="line">		&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端实现模板-1"><a href="#客户端实现模板-1" class="headerlink" title="客户端实现模板"></a>客户端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoClient)</span></span> ServerSideStreamMode(ctx context.Context) &#123;</span><br><span class="line">	stream, err := c.c.ServerSideStreamMode(ctx, &amp;demo.ServerSideStreamModeRequest&#123;Id: <span class="number">20</span>&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;ServerSideStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		data, err := stream.Recv()</span><br><span class="line">		<span class="keyword">if</span> errors.Is(err, io.EOF) &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatalf(<span class="string">&quot;ServerSideStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">		&#125;</span><br><span class="line">		log.Printf(<span class="string">&quot;ServerSideStreamMode Result: %v&quot;</span>, data)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="客户端流模式"><a href="#客户端流模式" class="headerlink" title="客户端流模式"></a>客户端流模式</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>客户端发送多个请求，服务端不断接受请求直到客户端没有发送请求位置，最后发送一个响应返回给客户端</p>
</blockquote>
<h3 id="protobuffer-定义-2"><a href="#protobuffer-定义-2" class="headerlink" title="protobuffer 定义"></a>protobuffer 定义</h3><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">DemoService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> ClientSideStreamMode(stream ClientSideStreamModeRequest) <span class="keyword">returns</span> (ClientSideStreamModeReply) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ClientSideStreamModeRequest</span> &#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ClientSideStreamModeReply</span> &#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端实现模板-2"><a href="#服务端实现模板-2" class="headerlink" title="服务端实现模板"></a>服务端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DemoService)</span></span> ClientSideStreamMode(stream demo.DemoService_ClientSideStreamModeServer) <span class="type">error</span> &#123;</span><br><span class="line">	message := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		data, err := stream.Recv()</span><br><span class="line">		<span class="keyword">if</span> errors.Is(err, io.EOF) &#123;</span><br><span class="line">			<span class="keyword">return</span> stream.SendAndClose(&amp;demo.ClientSideStreamModeReply&#123;</span><br><span class="line">				Message: message,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		message = <span class="built_in">append</span>(message, s.data[data.Id])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端实现模板-2"><a href="#客户端实现模板-2" class="headerlink" title="客户端实现模板"></a>客户端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoClient)</span></span> ClientSideStreamMode(ctx context.Context) &#123;</span><br><span class="line">	stream, err := c.c.ClientSideStreamMode(ctx)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;ClientSideStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125; &#123;</span><br><span class="line">		<span class="keyword">if</span> err := stream.Send(&amp;demo.ClientSideStreamModeRequest&#123;Id: <span class="type">int32</span>(v)&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatalf(<span class="string">&quot;ClientSideStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	reply, err := stream.CloseAndRecv()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;ClientSideStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;ClientSideStreamMode Result: %v&quot;</span>, reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="双向流模式"><a href="#双向流模式" class="headerlink" title="双向流模式"></a>双向流模式</h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>客户端发送多个请求，服务端不断接受并持续发送多个响应返回给客户端，直到客户端没有更多的请求进来</p>
</blockquote>
<h3 id="protobuffer-定义-3"><a href="#protobuffer-定义-3" class="headerlink" title="protobuffer 定义"></a>protobuffer 定义</h3><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">DemoService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> BothStreamMode(stream BothStreamModeRequest) <span class="keyword">returns</span> (stream BothStreamModeReply) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">BothStreamModeRequest</span> &#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">BothStreamModeReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端实现模板-3"><a href="#服务端实现模板-3" class="headerlink" title="服务端实现模板"></a>服务端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DemoService)</span></span> BothStreamMode(stream demo.DemoService_BothStreamModeServer) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		data, err := stream.Recv()</span><br><span class="line">		<span class="keyword">if</span> errors.Is(err, io.EOF) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		message := s.data[data.Id]</span><br><span class="line">		<span class="keyword">if</span> err := stream.Send(&amp;demo.BothStreamModeReply&#123;Message: message&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端实现模板-3"><a href="#客户端实现模板-3" class="headerlink" title="客户端实现模板"></a>客户端实现模板</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoClient)</span></span> BothStreamMode(ctx context.Context) &#123;</span><br><span class="line">	stream, err := c.c.BothStreamMode(ctx)</span><br><span class="line">	stop := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;BothStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			data, err := stream.Recv()</span><br><span class="line">			<span class="keyword">if</span> errors.Is(err, io.EOF) &#123;</span><br><span class="line">				<span class="built_in">close</span>(stop)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				log.Fatalf(<span class="string">&quot;BothStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">			&#125;</span><br><span class="line">			log.Printf(<span class="string">&quot;BothStreamMode Result: %v&quot;</span>, data)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125; &#123;</span><br><span class="line">		<span class="keyword">if</span> err := stream.Send(&amp;demo.BothStreamModeRequest&#123;Id: <span class="type">int32</span>(v)&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatalf(<span class="string">&quot;BothStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := stream.CloseSend(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;BothStreamMode Error: %v&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	&lt;-stop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要注意这里</p>
<ul>
<li>客户端要在发送请求之前要先开启一个goroutine持续从流对象种获取数据</li>
<li>在发送完毕后需要记得把发送关闭流的信息通知服务端</li>
</ul>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>windows powershell此系统上禁止运行脚本问题解决办法</title>
    <url>/blog/2019/10/30/powershell%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>问题描述：</p>
<ul>
<li>在powershell（或者调用powershell的IDE中）使用DOS命令时提示：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">无法加载文件ps1，因为在此系统中禁止执行脚本。有关详细信息，请参阅 <span class="string">&quot;get-help about_signing</span></span><br></pre></td></tr></table></figure>


<span id="more"></span>
<p>解决步骤：</p>
<ol>
<li><p>使用管理员权限打开powershell</p>
</li>
<li><p>查看当前脚本执行策略</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-executionpolicy</span></span><br></pre></td></tr></table></figure>

<p>若返回<code>Restricted</code>，说明不允许执行任何脚本 </p>
</li>
<li><p>继续执行以下命令，并且在系统提示后输入Y即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建一个自己的博客</title>
    <url>/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文记录一下用hexo这个框架从零搭建自己的博客的全过程。因为只是想体验一下hexo这个框架，平时做做学习笔记啥的，偶尔喂自己一点鸡汤╮(╯▽╰)╭，所以像评论这些扩展组件就没有搞，等哪天我想搞了再写上吧→_→…..</p>
<p>hexo是一个强大的使用Node.js驱动的博客框架，虽然说是用Node.js搭建的，但是使用下来感觉也不需要JavaScript的语法…..然后文章主体是使用markdown作为书写语言，需要对markdown做一些简单的了解哈，语法传送门在<a href="https://www.runoob.com/markdown/md-tutorial.html">这里</a>，相信你半个小时就能大致上手啦~</p>
<span id="more"></span>

<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul>
<li>Windows 10 1903(18362.900)</li>
<li>Visual Studio Code 1.47.1</li>
<li>Node v12.13.0</li>
<li>Git 2.23.0.windows.1</li>
<li>hexo 4.0.0</li>
</ul>
<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>到<a href="https://nodejs.org/en/">Node官网</a>下载Node.js安装包，选择LST(稳定版本)即可，如下图：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716213925124.png" alt="image-20200716213925124"></p>
<p>下载后以管理员身份运行安装包，全程点击接受协议和下一步一直到结束就可以啦~</p>
<p>安装完之后查看是否安装成功的方法：</p>
<p>打开CMD（win键 + R，然后在弹出的输入框中输出CMD然后回车即可），执行<code>node -v</code>，如果出现以下内容就说明安装成功啦~</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716214334747.png" alt="image-20200716214334747"></p>
<h4 id="更换npm镜像源"><a href="#更换npm镜像源" class="headerlink" title="更换npm镜像源"></a>更换npm镜像源</h4><p>默认的Node中的npm镜像源是直接指向国外的镜像源的，我们在国内下载起来速度你懂的…..所以我们要更换一下国内的镜像源以提高安装包的下载速度。我们这里选择的是淘宝的镜像源哈，打开CMD（话说刚刚打开的CMD你还没关掉吧……），运行以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>回车运行就可以啦</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载<a href="https://git-scm.com/downloads">Git</a>，选择window版的安装包，然后一路点击接受和确认即可……</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716235259477.png" alt="image-20200716235259477"></p>
<p>然后我们对着文件夹右键一下，Git Bash这个选项就代表安装好啦</p>
<h3 id="安装Visual-Studio-Code"><a href="#安装Visual-Studio-Code" class="headerlink" title="安装Visual Studio Code"></a>安装Visual Studio Code</h3><p>这步是可选的…..可以换成自己熟悉的编辑器呢，因为我自己平时就是用VsCode进行开发的所以…..</p>
<p>下载<a href="https://code.visualstudio.com/download#">VsCode</a>，选下图这个按钮，然后一直点同意和下一步到安装完成就可以啦……</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716220221761.png" alt="image-20200716220221761"></p>
<p>安装完能正常打开就可以啦</p>
<h3 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h3><p>还是刚刚的CMD…..运行下面指令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>等待安装完成后，检查hexo-cli是否已经全局安装成功运行以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm list -g --depth 0</span><br></pre></td></tr></table></figure>

<p>若看到了hexo-cli就表示已经安装成功啦</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716220929499.png" alt="image-20200716220929499"></p>
<h3 id="初始化博客项目"><a href="#初始化博客项目" class="headerlink" title="初始化博客项目"></a>初始化博客项目</h3><h4 id="初始化项目框架"><a href="#初始化项目框架" class="headerlink" title="初始化项目框架"></a>初始化项目框架</h4><p>找一个你喜欢的文件夹，在地址栏上输入CMD然后回车（哈哈哈哈没想到吧还是CMD……然后上面步骤的CMD可以关掉啦……），出现当前文件夹路径的CMD，然后运行以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo init blogdemo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解析：blogdemo是项目哈，这部分你可以换成自己喜欢的名字</p>
</blockquote>
<p>执行这个命令后hexo将会帮我们下载这个博客项目所需要的文件与依赖（下载过程可能会要一会儿….看网络….），下载好的提示如下图</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716230102850.png" alt="image-20200716230102850"></p>
<p>弱弱说一下装好之后CMD就能关掉了…..</p>
<p>然后在当前文件夹下面生成一个叫blogdemo的文件夹，这个时候我们选择右键blogdemo，选择“通过Code打开”，打开后能看到hexo-cli已经帮我们生成了整个项目的文件</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716230506308.png" alt="image-20200716230506308"></p>
<p>打开VsCode按下快捷键Ctrl + `，就可以打开终端啦（就把它当CMD吧….），默认来说的是powershell，但是可以通过更改成别的呢，比如我个人就习惯用bash作为默认的终端….按下快捷键Ctrl + `后在VsCode底部出现刚刚类似CMD的界面如下图：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716231242476.png" alt="image-20200716231242476"></p>
<h4 id="生成网页文件"><a href="#生成网页文件" class="headerlink" title="生成网页文件"></a>生成网页文件</h4><p>我们在终端中执行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716231405203.png" alt="image-20200716231405203"></p>
<p>上图表示执行完成，hexo g中的g是generate的简写，表示生成网页内容，这个我们下面再介绍</p>
<h4 id="在本地启动hexo"><a href="#在本地启动hexo" class="headerlink" title="在本地启动hexo"></a>在本地启动hexo</h4><p>我们在终端执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716231604653.png" alt="image-20200716231604653"></p>
<p>这个命令表示在本地启动hexo的博客项目，命令中的s是serve的简写，上图表示已经启动成功了，我们可以在浏览器中输入<a href="http://localhost:4000/">http://localhost:4000</a>来访问到我们刚启动的博客项目~</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716231746490.png" alt="image-20200716231746490"></p>
<p>成功看到这个页面说明我们初始化就成功啦~</p>
<h4 id="停止hexo"><a href="#停止hexo" class="headerlink" title="停止hexo"></a>停止hexo</h4><p>在终端中直接按下Ctrl + C即可停止hexo运行，停止后<a href="http://localhost:4000/">http://localhost:4000</a>就访问不到内容了</p>
<h3 id="将博客部署到Gitee-Pages上"><a href="#将博客部署到Gitee-Pages上" class="headerlink" title="将博客部署到Gitee Pages上"></a>将博客部署到Gitee Pages上</h3><p>其实这步也可以选择部署到GitHub Pages上，但是由于Github的服务器是在国外，可能平时访问的速度就会有些波动，为了能稳定访问我们选择部署到国内的Gitee（码云）上。</p>
<h4 id="注册Gitee账号"><a href="#注册Gitee账号" class="headerlink" title="注册Gitee账号"></a>注册Gitee账号</h4><p>这个……我应该不用展开说吧_(:з)∠)_……</p>
<h4 id="新建一个代码仓库"><a href="#新建一个代码仓库" class="headerlink" title="新建一个代码仓库"></a>新建一个代码仓库</h4><p>注册完成后进入个人主页，然后如下图点击新建仓库：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716233345634.png" alt="image-20200716233345634"></p>
<p>填写仓库基本信息，这里Name和Path保持一致就好，Description这个随意…..Property选Public，license选MIT就可以…..（其实不太懂这个….但是MIT见得比较多…..），其他可以不填或不选，然后点底部New按钮创建仓库</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716234310455.png" alt="image-20200716234310455"></p>
<p>下图就是我们刚刚创建好的代码仓库啦</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716234621276.png" alt="image-20200716234621276"></p>
<h4 id="修改hexo项目文件夹中的部署配置"><a href="#修改hexo项目文件夹中的部署配置" class="headerlink" title="修改hexo项目文件夹中的部署配置"></a>修改hexo项目文件夹中的部署配置</h4><p>我们回到VsCode中，在左侧的文件目录中找到_config.yml这个文件，单击打开它，直接到最后，看到下面这段代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> </span><br></pre></td></tr></table></figure>



<p>我们把这段代码改成如下内容，保存</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/yukiouma/MyBlog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>



<p>type和branch后面的内容可以不用理会，我们重点看看repo后面的这个值是怎么来的，我们回到刚刚新建的代码仓库的页面，然后点击下图中的Clone or Download，然后点击弹窗中的Copy，就获得了仓库的地址，我们直接把这个值粘贴到repo: 的后面就OK啦</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200716235933025.png" alt="image-20200716235933025"></p>
<h4 id="安装-Git-的部署插件"><a href="#安装-Git-的部署插件" class="headerlink" title="安装 Git 的部署插件"></a>安装 Git 的部署插件</h4><p>在终端中运行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>



<h4 id="部署到代码仓库中"><a href="#部署到代码仓库中" class="headerlink" title="部署到代码仓库中"></a>部署到代码仓库中</h4><p>在终端中执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>d是deploy的缩写，这行命令表示将刚刚执行的<code>hexo g</code>生成的网页文件发布到我们刚刚新建的代码仓库里面。如果是第一次往上面发布东西的话会要求你输入刚刚在Gitee注册的账号密码，之后电脑中会留有记录，以后就不用输入密码就可以直接发布上去了</p>
<p>我们回到刚创建的代码仓库，就可以看到我们刚刚发布上去的编译后的代码啦</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717001308044.png" alt="image-20200717001308044"></p>
<h4 id="创建Gitee-Pages服务"><a href="#创建Gitee-Pages服务" class="headerlink" title="创建Gitee Pages服务"></a>创建Gitee Pages服务</h4><p>点击Service，然后选择Gitee Pages</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717001407927.png" alt="image-20200717001407927"></p>
<p>进入到如下页面，勾选Enforce HTTPS后，点击Create，然就创建好Gitee Pages服务了，稍等片刻整个博客就部署好啦，部署好之后页面会提示你访问的地址的~</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717002810532.png" alt="image-20200717002810532"></p>
<p>然后我们点击这个地址访问一下，出现下图，样式全部都挂了…..跟刚刚本地启动的时候完全不一样…(╯‵□′)╯︵┻━┻</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717002907784.png" alt="image-20200717002907784"></p>
<h4 id="第二次修改部署配置"><a href="#第二次修改部署配置" class="headerlink" title="第二次修改部署配置"></a>第二次修改部署配置</h4><p>还是刚刚的_config.yml这个文件，找到下面这段代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure>

<p>我们把url: 后面的那个地址改成我们代码仓库的地址（注意，代码仓库的地址和博客访问的地址是不一样的），查看代码仓库的地址如下图：</p>
<p>第一步，点击Settings，进入设置页面</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717010008376.png" alt="image-20200717010008376"></p>
<p>第二步，查看仓库地址，红框的内容才是仓库地址</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717010109312.png" alt="image-20200717010109312"></p>
<p>然后我们把这个地址写到url后面，然后把地址最后的部分写到root后面，保存即可，如下所示</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://gitee.com/yukiouma/MyBlog/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/MyBlog</span></span><br></pre></td></tr></table></figure>



<h4 id="再次发布到仓库中"><a href="#再次发布到仓库中" class="headerlink" title="再次发布到仓库中"></a>再次发布到仓库中</h4><p>我们刚刚修改了配置，所以之前生成的网页文件需要清空然后重新生成，我们先执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>这个命令表示情清空之前生成好的网页文件</p>
<p>然后执行依次执行下面的内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>具体解析到上面找一下哈，就不重复说啦</p>
<p>我们每次更新了博客内容的时候都需要重复上述的三个步骤去部署到代码仓库里面，每次都需要执行三个命令感觉挺麻烦的……所以我们搞一个脚本让他们按顺序一起执行。</p>
<p>在博客项目的根目录中创建一个叫deploy.sh的文件，里面写入以下内容，然后保存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>以后我们只要在终端执行<code>sh deploy.sh</code>就可以一次性执行这三个指令啦</p>
<p>然后我们回到刚刚的Gitee Pages服务页面</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717001407927.png" alt="image-20200717001407927"></p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717004128744.png" alt="image-20200717004128744"></p>
<p>原本的Create变成了Update，点击它，稍等片刻部署就完成了</p>
<p>我们再访问一次：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717005530618.png" alt="image-20200717005530618"></p>
<p>部署成功啦~~~</p>
<h2 id="配置博客站点信息"><a href="#配置博客站点信息" class="headerlink" title="配置博客站点信息"></a>配置博客站点信息</h2><p>我们刚搭建好的博客的站点信息全部都是默认的内容，我们需要改成我们自己的信息，要不咋叫自己的博客呢……</p>
<p>还是_config.yml这个文件，我们来修改以下下面这部分的内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">随便起的名字....</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">喵喵喵喵喵？</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">我也不知道说点啥好.....</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&quot;demo&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Yuki</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>保存之后我们在本地启动项目（终端运行<code>hexo s</code>），访问<a href="http://localhost:4000/"> http://localhost:4000/ </a>，看到和之前原始的页面相比发生了变化</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717013432466.png" alt="image-20200717013432466"></p>
<h2 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h2><p>说实话，我觉得这个默认的主题有点一言难尽…….我们还是换个别的主题吧。换主题这个事情用不同的组件用法是不一样的，我们简单介绍一个相对热门的主题，名字叫Next，主打黑白的熊猫风格的界面</p>
<h3 id="下载主题文件"><a href="#下载主题文件" class="headerlink" title="下载主题文件"></a>下载主题文件</h3><p>在VsCode终端执行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/hexo<span class="literal">-theme-next</span> themes/next</span><br></pre></td></tr></table></figure>

<p>执行完成后，我们返现在themes这个文件夹下面多了个名字为next的文件夹，这就是我们准备要使用的next主题的文件。</p>
<h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>还是_config.yml这个文件，找到以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure>

<p>将landscape替换成 next 即可。然后我们重新启动以下本地的服务，继续访问<a href="http://localhost:4000/"> http://localhost:4000/ </a>就会发现主题发生变化了</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717014450057.png" alt="image-20200717014450057"></p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>切换好主题了，我们可以对默认的配置进行一些列的修改。注意，以下说的配置文件_config.yml不是根目录下的_config.yml，而指的是 themes\next\_config.yml </p>
<h4 id="排版样式"><a href="#排版样式" class="headerlink" title="排版样式"></a>排版样式</h4><p>排版样式在themes\next\_config.yml的以下内容中配置，将喜欢的样式的注释（开头的#号）拿掉即可，我现在选了Pisces</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<p>然后我们重启下本地的服务，刷新页面就能看到排版变成我们常见的那种样子啦</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717015158251.png" alt="image-20200717015158251"></p>
<h4 id="配置一个头像"><a href="#配置一个头像" class="headerlink" title="配置一个头像"></a>配置一个头像</h4><p>在themes\next\_config.yml的找到以下内容，进行以下修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.png</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure>

<p>我这边的头像文件时png格式的，并且我将它命名为avatar.png了，所以url的值是&#x2F;images&#x2F;avatar.png，然后把头像文件放到 themes\next\source\images目录下，rounder和rotated分别是头像的样式是否是圆框以及是否会随着鼠标旋转…..挺炫酷的我就把它们都设置为true打开了…..</p>
<p>我们重启以下服务，看看效果，发现头像已经出来啦</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717020431809.png" alt="image-20200717020431809"></p>
<h4 id="配置代码块的颜色"><a href="#配置代码块的颜色" class="headerlink" title="配置代码块的颜色"></a>配置代码块的颜色</h4><p>在Next主题中代码块默认的样式是：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717231236079.png" alt="image-20200717231236079"></p>
<p>emmm……极度依赖黑暗模式的我修改成了MacOS风格的样子…….右上角还多了个一键粘贴代码的小按钮，很愉悦…..</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717231529603.png" alt="image-20200717231529603"></p>
<p>在themes\next\_config.yml的找到以下内容，进行以下修改即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure>





<h4 id="快速返回顶端按钮"><a href="#快速返回顶端按钮" class="headerlink" title="快速返回顶端按钮"></a>快速返回顶端按钮</h4><p>在themes\next\_config.yml的找到以下内容，根据喜好进行修改（下面是我自己的值……_(:з)∠)_）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>enable表示是否打开快速返回顶端按钮的功能，默认为true</p>
<p>sidebar表示快速返回功能是否展示在左侧的目录下方，默认是false</p>
<p>scrollpercent表示是否展示当前已阅读整篇文章的百分数，默认为false</p>
<p>以下是点进去某篇文章时的快速返回顶端按钮的位置</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717215757841.png" alt="image-20200717215757841"></p>
<h4 id="展示当前阅读进度"><a href="#展示当前阅读进度" class="headerlink" title="展示当前阅读进度"></a>展示当前阅读进度</h4><p>在themes\next\_config.yml的找到以下内容，根据喜好进行修改…..</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#FF0000&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>

<p>enable表示是否打开阅读进度的功能</p>
<p>position表示进度条的位置位于页面顶部或者页面底部（只能填top或者bottom两个值）</p>
<p>color表示进度条的颜色，使用是6位十六进制颜色值，快速查询颜色对应的值在<a href="https://www.runoob.com/html/html-colornames.html">这里</a>，上面的那个参数是表示红色</p>
<p>height表示进度条的厚度，单位是像素px，可以自己设置然后预览来体会一下这个单位哈_(:з)∠)_……</p>
<p>我们来看一下按照上面的参数设置开启后的效果：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717221340233.png" alt="image-20200717221340233"></p>
<p>好了，主题配置就举上面这些栗子啦，想了解更多的主题设置我们可以到themes\next\_config.yml这个文件下随便改改调调来看看效果就知道啦，或者可以直接参考<a href="https://theme-next.org/docs/">官方文档</a>噢，上面都有详细的说明的</p>
<p>至此，我们搭建的步骤就全部完成啦，其实还有一些其它的内容可以玩的，比如搞一个评论模块，开启RSS订阅和引流Github主页等，这些部分的详细的内容可以去参考崔大大的<a href="https://mp.weixin.qq.com/s/qWMsCUjbmD1tocNEt23qVw">这篇文章</a>，我懒癌发作懒得配置其它内容了…….</p>
<h2 id="创建与发布文章"><a href="#创建与发布文章" class="headerlink" title="创建与发布文章"></a>创建与发布文章</h2><p>好了，上面搞了这么久，终于到了将怎么发布文章啦。网站搭建起来其实基本就不用怎么管了…..主要就是平时使用markdown写文章，然后编译发布到Gitee仓库里就可以啦</p>
<p>markdown的书写裂墙推荐神器<a href="https://typora.io/">typora</a>，超一流的markdown书写体验2333</p>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>我们使用快捷键Ctrl + `快速切换到VsCode的终端，运行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new 喵喵喵喵喵</span><br></pre></td></tr></table></figure>

<p>然后在 source&#x2F;_posts 下面就会出现一个叫<code>喵喵喵喵喵.md</code>的markdown文件，下我们可以在开头添加一些标签和分类的信息</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 喵喵喵喵喵</span><br><span class="line">date: 2020-07-17 22:25:51</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> 喵标签1</span><br><span class="line"><span class="bullet">-</span> 喵标签2</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 喵分类1</span><br><span class="line"><span class="section">- 喵分类2</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>



<p>可以添加多个标签和分类，格式参考上面的内容哈。然后接下来我们就可以用markdown语法来书写正文了，下面是随便写的一点东西……</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 应用1</span></span><br><span class="line"><span class="quote">&gt; 应用2</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 有序列表1</span><br><span class="line"><span class="bullet">2.</span> 有序列表2</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 无序列表1</span><br><span class="line"><span class="bullet">*</span> 无序列表2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下面是一个表格</span><br><span class="line"></span><br><span class="line">| 列1  | 列2  | 列3  |</span><br><span class="line">| ---- | ---- | ---- |</span><br><span class="line">| a    | b    | c    |</span><br><span class="line">| 1    | 2    | 3    |</span><br><span class="line"></span><br><span class="line">下面是一个连接</span><br><span class="line">[<span class="string">一个链接</span>](<span class="link">https://yukiouma.gitee.io/blog/</span>)</span><br></pre></td></tr></table></figure>



<p>然后我们本地重启一下服务（复习一下哈，本地启动项目是的命令是<code>hexo s</code>，停止是快捷键Ctrl + C），预览一下效果</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717224726231.png" alt="image-20200717224726231"></p>
<p>我们发现，在首页展示完整的一篇文章实在是太过占篇幅了……我们可以添加<code>&lt;!-- more --&gt;</code>标签到markdown中达到首页仅展示文章部分内容的效果</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 应用1</span></span><br><span class="line"><span class="quote">&gt; 应用2</span></span><br></pre></td></tr></table></figure>



<p>重启服务预览：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717225144722.png" alt="image-20200717225144722"></p>
<p>看，现在这样是不是好多了~</p>
<h3 id="在文章中插入图片"><a href="#在文章中插入图片" class="headerlink" title="在文章中插入图片"></a>在文章中插入图片</h3><p>在markdown中，图片本身是一个引用的链接，具体代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![image-20200717225144722](C:\Users\Yuki\AppData\Roaming\Typora\typora-user-images\image-20200717225144722.png)</span><br></pre></td></tr></table></figure>

<p>中括号里面的是照片名称，后面的小括号表示图片的路径，可以是绝对或者是相对路径。</p>
<p>我们要在博客的文章中加入图片，首先我们要去到根目录下的_config.yml（注意是根目录下那个哈，别和主题里的那个搞混了…..）去配置如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>然后要在路径source&#x2F;_posts下新建一个文件夹，名称需要和对应的文章的文件名一样，如下图，然后该篇文章的所有图片需要放如到这个文件夹中</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717225838220.png" alt="image-20200717225838220"></p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717225938442.png" alt="image-20200717225938442"></p>
<p>然后在markdown中的写法是：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">avatar</span>](<span class="link">avatar.png</span>)</span><br></pre></td></tr></table></figure>



<p>重启服务预览：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717230859309.png" alt="image-20200717230859309"></p>
<p>刚刚的图片就出来啦~</p>
<h3 id="为博客添加标签页，分类页"><a href="#为博客添加标签页，分类页" class="headerlink" title="为博客添加标签页，分类页"></a>为博客添加标签页，分类页</h3><p>回到VsCode终端（快捷键 Ctrl + `），执行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>



<p>执行完毕后会生成下面两个文件</p>
<blockquote>
<p> source&#x2F;tags&#x2F;index.md</p>
<p> source&#x2F;categories&#x2F;index.md </p>
</blockquote>
<p>然后我们将source&#x2F;tags&#x2F;index.md更改为下述内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-10-30 22:46:50</span><br><span class="line">type: tags</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>将source&#x2F;categories&#x2F;index.md更改为下述内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-10-30 22:49:33</span><br><span class="line">type: categories</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>



<p>在themes\next\_config.yml（注意啦，这个是主题Next下面的_config.yml，不是根目录下面的那个）的找到以下内容，进行以下修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>



<p>重启服务预览：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717234856243.png" alt="image-20200717234856243"></p>
<p>我们看到左侧的栏目里面已经出现标签和分类啦，分别点进去就能看到我们的博客里面所有的标签与分类啦</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717235445805.png" alt="image-20200717235445805"></p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200717235522879.png" alt="image-20200717235522879"></p>
<h3 id="创建搜索页"><a href="#创建搜索页" class="headerlink" title="创建搜索页"></a>创建搜索页</h3><p>如果发布了很多文章之后我们想找到某篇文章，这个时候搜索页就非常有用呢，具体安装如下：</p>
<p>打开VsCode终端（快捷键Ctrl + `），运行以下命令来安装搜索插件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-searchdb</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>



<p>安装完成后，在根目录下的_config.yml文件的最后添加以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>



<p>然后在themes\next\_config.yml文件找到以下内容，并进行以下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p>保存后重启服务预览：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200718003146711.png" alt="image-20200718003146711"></p>
<p>看，搜索栏已经出现了，我们试一下使用它：</p>
<p><img src="/blog/2020/07/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20200718003235809.png" alt="image-20200718003235809"></p>
<p>看来能检索到我们想要的内容呢~</p>
<h3 id="将更改的内容发布到代码仓库中"><a href="#将更改的内容发布到代码仓库中" class="headerlink" title="将更改的内容发布到代码仓库中"></a>将更改的内容发布到代码仓库中</h3><p>这是一个<a href="#%E5%86%8D%E6%AC%A1%E5%8F%91%E5%B8%83%E5%88%B0%E4%BB%93%E5%BA%93%E4%B8%AD">传送门</a>，方法与之前提到的发布到代码仓库的一样哈，点击传送门回去喵一下啦</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这个从零开始搭建自己的博客的小攻略就写到这里啦，如果按上面的步骤一步步走的话，你应该能搭建一个和我这个<a href="https://yukiouma.gitee.io/myblog/">demo</a>一样的博客网站呢，如果中间有发现哪里我没有说清楚的欢迎联系呢，也可以找我要一下本地部署的现成的源码…..但是还是建议自己动手搞一下哈，毕竟乐趣还是在自己动手的过程中才能体会到呢~</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Remote-ssh连接vscode与远程服务器</title>
    <url>/blog/2020/07/14/%E4%BD%BF%E7%94%A8Remote-ssh%E8%BF%9E%E6%8E%A5vscode%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li><p>宿主机：Windows10</p>
</li>
<li><p>服务器：CentOS 7</p>
</li>
<li><p>VsCode：1.47.0</p>
</li>
<li><p>Remote-ssh：0.51.0</p>
</li>
</ul>
<span id="more"></span>

<h2 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h2><ol>
<li><p>在宿主机上，安装OpenSSH</p>
</li>
<li><p>Git bash中运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 - &quot;xxxx&quot; # 请将xxxx替换成自己定义的内容，一般习惯为自己邮箱</span><br></pre></td></tr></table></figure>

<p>之后可以一路回车确定即可，完成后在宿主机的目录<code>C:\Users\username\.ssh</code>下会看到生成了<code>id_rsa</code>与<code>id_rsa.pub</code>两个文件</p>
</li>
<li><p>将<code>id_rsa.pub</code>上传至服务器的<code>~/.ssh/</code>目录下，并更名为<code>authorized_keys</code></p>
</li>
<li><p>在宿主机的<code>C:\Users\username\.ssh</code>中配置文件<code>config</code>，内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host myServer	# 服务器名</span><br><span class="line">	HostName 192.168.1.233 #服务器ip</span><br><span class="line">	User root	# 登录用户名</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>在VsCode中安装插件Remote-ssh</p>
</li>
<li><p>在VsCode的左侧图标中找到Remote Explore，点击后会看到我们刚刚在在文件<code>config</code>中配置的服务器名，右键选择连接至该服务器，在左下角看到SSH: &lt;服务器名称&gt;即表示连接成功</p>
</li>
</ol>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol>
<li><p>今天不知道为啥突然打开虚拟机之后VsCode突然远程连接不上了，但是Xshell是能正常连接的，然后具体报错的内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">failed to create hard link &#x27;/home/*/.vscode-server/bin/*/*&#x27; file exists</span><br></pre></td></tr></table></figure>

<p>搜索了一下，发现以下方法可以解决：</p>
<p>连接上服务器后，把服务器上的<code>/root/.vscode-server/bin/</code>的日期最新的文件夹中的名字带有<code>vscode-remote-lock.root</code>的两个文件删除，重新使用VsCode连接后成功。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker快速安装RabbitMQ</title>
    <url>/blog/2021/10/17/%E4%BD%BF%E7%94%A8docker%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<h2 id="环境与配置"><a href="#环境与配置" class="headerlink" title="环境与配置"></a>环境与配置</h2><ul>
<li>VMware® Workstation 15 Pro - 15.5.0 build-14665864</li>
<li>宿主机： Windows 10, 64-bit  (Build 19042) 10.0.19042</li>
<li>CentOS Linux release 7.9.2009 (Core)</li>
</ul>
<h2 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h2><ul>
<li>docker 20.10.1</li>
<li>RabbitMQ镜像: docker.io&#x2F;rabbitmq:3.8-management</li>
</ul>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull docker.io/rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>

<p>要注意要拉取镜像名称带有management的镜像。默认的镜像是不带有web管理界面的</p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>查看镜像的ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@playground ~]<span class="comment"># docker images | grep mq</span></span><br><span class="line">rabbitmq                3.8-management   d589227b9b99   23 hours ago    250MB</span><br></pre></td></tr></table></figure>

<p>由上面的结果可知在本机的rabbitmq镜像id为<code>d589227b9b99</code></p>
<p>启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name rabbitmq -d -p 15672:15672 -p 5672:5672 d589227b9b99</span><br></pre></td></tr></table></figure>

<p>命令解析：</p>
<p><code>--name</code>: 指定容器名称</p>
<p><code>-d</code>: 进程守护模式运行</p>
<p><code>-p 15672:15672</code>: 15672端口为web服务客户端的端口，将容器的该端口映射到宿主机的相同的端口号中</p>
<p><code>-p 5672:5672</code>:  5672端口为中间件服务端口，将容器的该端口映射到宿主机的相同的端口号中</p>
<p>查看容器是否正常运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@playground ~]<span class="comment"># docker ps | grep mq</span></span><br><span class="line">3c13d0f36e9b   d589227b9b99                   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   25 minutes ago   Up 25 minutes      4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp   rabbitmq</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="web服务访问"><a href="#web服务访问" class="headerlink" title="web服务访问"></a>web服务访问</h3><p>浏览器输入<code>&lt;主机ip&gt;:15672</code></p>
<p>默认创建的账号密码均为guest</p>
<p><img src="/blog/2021/10/17/%E4%BD%BF%E7%94%A8docker%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85RabbitMQ/1634441126.jpg" alt="1634441126.jpg"></p>
<p>如果能正常登录并看到该页面，表示web服务正常运行</p>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p> 默认的<code>guest</code> 账户有访问限制，默认只能通过本地网络(如 localhost) 访问，远程网络访问受限，我们添加一个root用户以满足远程网络访问的需求</p>
<p>进入容器内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 3c13d0f36e9b bin/bash</span><br></pre></td></tr></table></figure>

<p>创建用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@3c13d0f36e9b:/<span class="comment"># rabbitmqctl add_user root 000000 </span></span><br><span class="line">Adding user <span class="string">&quot;root&quot;</span> ...</span><br></pre></td></tr></table></figure>

<p>赋予root所有权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@3c13d0f36e9b:/<span class="comment"># rabbitmqctl set_permissions -p / root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span></span><br><span class="line">Setting permissions <span class="keyword">for</span> user <span class="string">&quot;root&quot;</span> <span class="keyword">in</span> vhost <span class="string">&quot;/&quot;</span> ...</span><br></pre></td></tr></table></figure>

<p> 赋予root用户administrator角色 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@3c13d0f36e9b:/<span class="comment"># rabbitmqctl set_user_tags root administrator</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">&quot;root&quot;</span> to [adminstrator] ...</span><br></pre></td></tr></table></figure>

<p>查看用户是否被成功建立</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@3c13d0f36e9b:/<span class="comment"># rabbitmqctl list_users</span></span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">user	tags</span><br><span class="line">guest	[administrator]</span><br><span class="line">root	[administrator]</span><br></pre></td></tr></table></figure>

<p>执行<code>exit</code>退出容器</p>
<p>回到web页面，测试root用户是否能成功登录</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://juejin.cn/post/6844903970545090574">docker安装RabbitMq</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>如何发布Go Module</title>
    <url>/blog/2022/01/12/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83Go-Module/</url>
    <content><![CDATA[<h2 id="建立和发布Go模块的流程"><a href="#建立和发布Go模块的流程" class="headerlink" title="建立和发布Go模块的流程"></a>建立和发布Go模块的流程</h2><h3 id="引用本机其它位置的Go模块"><a href="#引用本机其它位置的Go模块" class="headerlink" title="引用本机其它位置的Go模块"></a>引用本机其它位置的Go模块</h3><p>假设我们有如下的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./module-learn/</span><br><span class="line">├── module1</span><br><span class="line">│   ├── go.mod</span><br><span class="line">│   └── whattime.go</span><br><span class="line">└── module2</span><br><span class="line">    ├── go.mod</span><br><span class="line">    └── main.go</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>module1和module2的模块名称分别为<code>example.com/module1</code>和<code>example.com/module2</code></p>
<p>在<code>module1/whattime.go</code>中定义了一个方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> module1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WhatTimeIsItNow</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> time.Now().Local().String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们希望在module2中引用它</p>
<p>在<code>module2/main.go</code>中如下定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/module1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;it&#x27;s %s now.\n&quot;</span>, module1.WhatTimeIsItNow())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为了能引用到module2的go mod范围以外的module1的方法，我们需要先在module2下先执行以下命令来替换外部module的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod edit -replace example.com/module1=../module1</span><br></pre></td></tr></table></figure>

<p>完成后在module2下的<code>go.mod</code>文件会出现以下内容，</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">replace example.com/module1 =&gt; ../module1</span><br></pre></td></tr></table></figure>

<p>表示替换生效</p>
<p>此时我们只需要执行<code>go mod tidy</code>，查看<code>go.mod</code>发现成功引用了module1</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module example.com/module2</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br><span class="line"></span><br><span class="line">replace example.com/module1 =&gt; ../module1</span><br><span class="line"></span><br><span class="line">require example.com/module1 v0<span class="number">.0</span><span class="number">.0</span><span class="number">-00010101000000</span><span class="number">-000000000000</span></span><br></pre></td></tr></table></figure>

<p>运行module2，结果符合预期</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@playground module2]<span class="comment"># go run .</span></span><br><span class="line">it<span class="string">&#x27;s 2022-01-12 21:23:22.466931038 +0800 CST now.</span></span><br></pre></td></tr></table></figure>



<h3 id="发布一个Go模块"><a href="#发布一个Go模块" class="headerlink" title="发布一个Go模块"></a>发布一个Go模块</h3><ol>
<li>首先创建一个go模块</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init github.com/AkiOuma/greeting</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在该模块中定义好一些方法后，创建一个仓库，提交到代码仓</p>
</li>
<li><p>为该模块提交版本标签</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit v0.1.0&quot;</span></span><br><span class="line">git tag v0.1.0</span><br><span class="line">git push origin v0.1.0</span><br></pre></td></tr></table></figure>

<p>​		推送成功后，到仓库上查看提交的版本是否存在</p>
<ol start="4">
<li><p>在其它项目中引用该模块</p>
<p>使用<code>go get github.com/AkiOuma/greeting</code>或者<code>go mod tidy</code>能成功安装该模块，完成</p>
</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/AkiOuma/greeting&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/AkiOuma/greeting/zh&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(greeting.Greet(<span class="string">&quot;yuki&quot;</span>))</span><br><span class="line">	fmt.Println(zh.Greet(<span class="string">&quot;yuki&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>本地快捷部署私有镜像仓库</title>
    <url>/blog/2021/08/30/%E6%9C%AC%E5%9C%B0%E5%BF%AB%E6%8D%B7%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li><p>OS</p>
<p>CentOS Linux release 7.9.2009 (Core)</p>
</li>
<li><p>Docker</p>
<p>20.10.6</p>
</li>
</ul>
<span id="more"></span>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>假定有一个域名叫workspace，可以被设备解析为正确的IP地址，私有仓库部署在该IP的设备上</p>
<p>如果没有可以被正常解析的域名，在设置信任仓库的时候直接使用IP+端口的形式即可</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>拉取私有仓库的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>


</li>
<li><p>运行私有仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -di --name registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>


</li>
<li><p>设置非https的信任仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>写入以下内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;workspace:5000&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看私有仓库中的镜像列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://workspace:5000/v2/_catalog</span><br></pre></td></tr></table></figure>

<p>返回结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125; <span class="comment"># 此时镜像位空，返回空数组</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>尝试将一个本地镜像推送至该私有镜像</p>
<p>先为本地镜像打上标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag janus-design:v1 workspace:5000/janus-design:v1</span><br></pre></td></tr></table></figure>



<p>推送至私有仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push workspace:5000/janus-design:v1</span><br></pre></td></tr></table></figure>



<p>再次查看私有仓库镜像列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@workspace ~]<span class="comment"># curl http://workspace:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;janus-design&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>

<p>此时列表存在刚上传的镜像了</p>
</li>
<li><p>尝试在另一台设备拉去该镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]<span class="comment"># docker pull workspace:5000/janus-design:v1</span></span><br><span class="line">v1: Pulling from janus-design</span><br><span class="line">5d20c808ce19: Already exists </span><br><span class="line">724902b3d072: Pull complete </span><br><span class="line">Digest: sha256:10d2ab23ea72418d274f210bee8624eb6474ed1d88915d90790514ff92860e7e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> workspace:5000/janus-design:v1</span><br></pre></td></tr></table></figure>

<p>可以看到拉取成功</p>
</li>
<li><p>其它web api参考文档</p>
<p><a href="https://docs.docker.com/registry/">Dokcer Registry</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>记录Hadoop运行中出现的一些问题以及解决办法</title>
    <url>/blog/2019/11/04/%E8%AE%B0%E5%BD%95Hadoop%E8%BF%90%E8%A1%8C%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li>MapReduce Job的驱动程序中出现：</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span>java.lang.UnsatisfiedLinkError:org.apache.hadoop.io.nativeio.NativeIO<span class="variable">$Windows</span>.access0(Ljava/lang/String;I)Z</span><br></pre></td></tr></table></figure>

 <span id="more"></span>  

<p>   Solution：</p>
<blockquote>
<p>其根本原因是因为在<code>C:\Windows\System32</code>中缺少<code>hadoop.dll</code>这个文件…..(晕…..)，因此我们只要把hadoop的bin下面的<code>hadoop.dll</code>复制至<code>C:\Windows\System32</code>中即可…..(╯‵□′)╯︵┻━┻</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据离线开发</category>
      </categories>
      <tags>
        <tag>HADOOP</tag>
      </tags>
  </entry>
  <entry>
    <title>记录vscode使用时遇到的问题以及解决方案</title>
    <url>/blog/2019/11/17/%E8%AE%B0%E5%BD%95vscode%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="运行debug时无法断点调试"><a href="#运行debug时无法断点调试" class="headerlink" title="运行debug时无法断点调试"></a>运行debug时无法断点调试</h2><ul>
<li><p>问题描述：运行debug时无法断点调试，并且断点列表出显示：<code>Breakpoint set but not yet bound</code></p>
 <span id="more"></span></li>
<li><p>解决过程：</p>
<ol>
<li><p>首先打开了数个项目，开启debug后发现均无法实现断点调试，结合昨天刚对win10进行更新……初步判断是系统更新导致原本的debug配置无效了。</p>
<p>(原本debug的配置为egg官方推荐使用的配置，如下)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vscode/launch.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Egg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm.cmd&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;run&quot;</span><span class="punctuation">,</span> <span class="string">&quot;debug&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;restart&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9229</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;autoAttachChildProcesses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在看到这篇帖子后(vscode打断点无效)[ <a href="https://github.com/eggjs/egg/issues/1048">https://github.com/eggjs/egg/issues/1048</a> ]，更改了debug的配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vscode/launch.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Egg Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;--&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;--inspect-brk&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;restart&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9229</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;autoAttachChildProcesses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Egg Test&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;runtimeArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;test-local&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;--&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;--inspect-brk&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9229</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;autoAttachChildProcesses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;attach&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Egg Attach to remote&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;localRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;remoteRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/src/app&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9999</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>再次启动debug发现可以进行断点调试了，不过每次启动的时候都会莫名其妙地在egg源码中跳出两个断点（不是自己断的…），然后在package.json中更改下面一处即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json  </span></span><br><span class="line"><span class="attr">&quot;egg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;declarations&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一些koa入门知识</title>
    <url>/blog/2019/11/09/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bkoa%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="Koa-安装"><a href="#Koa-安装" class="headerlink" title="Koa 安装"></a>Koa 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 初始化一个node项目</span><br><span class="line">npm init -yes</span><br><span class="line">// 安装koa</span><br><span class="line">npm i koa --save</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>
<h3 id="启动一个koa项目"><a href="#启动一个koa项目" class="headerlink" title="启动一个koa项目"></a>启动一个koa项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;Hello koa!&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">4200</span>);</span><br></pre></td></tr></table></figure>

<p>Then visit localhost:4200 you can see “Hello koa!”</p>
<hr>
<h3 id="koa路由"><a href="#koa路由" class="headerlink" title="koa路由"></a>koa路由</h3><ul>
<li>安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-router</span><br></pre></td></tr></table></figure>

<ul>
<li>配置一个路由实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置静态路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;HomePage&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;News&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置一个动态路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/page/:number&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`This is paeg <span class="subst">$&#123;ctx.params.number&#125;</span>`</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动路由</span></span><br><span class="line">app</span><br><span class="line">    .<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">    .<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">4200</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><ul>
<li>middleware主要的思想是拦截请求，然后执行一些操作之后，（再根据操作的结果决定）进入下一步的路由中。在请求进入相应的路由指定的组件中获得数据即将返回给客户端的浏览器时，再次拦截下来对所请求到的数据进一步加工，即所谓的洋葱圈模型（以一条直线通过一个洋葱时，在进入到洋葱的中心位置之后，再出来到洋葱外面时必定要先经过之前曾经穿过的洋葱层）</li>
<li>middleware的函数时next，需要注意的是，作为回调函数时不能单独使用next，需要和ctx一起使用</li>
<li>基本用法有两种<ol>
<li>在app.use中使用拦截指定或者所有请求</li>
<li>在router.get中拦截指定请求</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置middleware</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//在控制台打印当前请求的地址，这个是在进入路由匹配之前的行为</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`You&#x27;re visiting <span class="subst">$&#123;ctx.url&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//若请求没有找到匹配的路由，此时状态码会变为404，这个是匹配路由之后的行为</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">status</span> == <span class="number">404</span>) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&#x27;Sorry page not found...&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在router中使用middleware</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;HomePage&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="title function_">async</span>(ctx, next) =&gt; &#123;		<span class="comment">//本次对&quot;/news&quot;拦截只打印控制台</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a middleware&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;).<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;				<span class="comment">//本次对&quot;/news&quot;拦截返回body</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;News&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">    .<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">4200</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>在koa中获取cookies对象：<code>ctx.cookies</code>（该对象不可被遍历….）</p>
<ul>
<li>基本使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在/页面设置一个cookies键值对</span></span><br><span class="line">    ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;koa&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 该cookie多久后失效</span></span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>,</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;Hi koa&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/page&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在page页面打印cookies的指定键值对</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;Hello, &#x27;</span> + ctx.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">    .<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">4200</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>ctx.cookies.set中的一些选项</p>
<table>
<thead>
<tr>
<th>option name</th>
<th>value</th>
<th>explaination</th>
</tr>
</thead>
<tbody><tr>
<td>maxAge</td>
<td>int</td>
<td>从现在起该cookie多久后过期，单位是毫秒</td>
</tr>
<tr>
<td>path</td>
<td>string</td>
<td>指定该cookie有效的路径</td>
</tr>
<tr>
<td>domain</td>
<td>string</td>
<td>cookie域名</td>
</tr>
<tr>
<td>secure</td>
<td>boolean</td>
<td>是否只允许https访问</td>
</tr>
<tr>
<td>httpOnly</td>
<td>boolean</td>
<td>是否只有服务端才可以访问cookie</td>
</tr>
<tr>
<td>expires</td>
<td>Date</td>
<td>cookie到某个具体日期失效</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul>
<li><p>installation</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-session --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>与cookies不同，session在使用前需要配置middleware</p>
</li>
</ul>
<p>配置实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Session</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置cookied的签名，用于加密，可以自由设置数组值</span></span><br><span class="line">app.<span class="property">keys</span> = [<span class="string">&#x27;yuki&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置middleware</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;koa:sess&#x27;</span>, <span class="comment">// 默认，无需修改？？</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 过期时间</span></span><br><span class="line">    <span class="attr">overwrite</span>: <span class="literal">true</span>, <span class="comment">// 无需设置</span></span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span>, <span class="comment">// 是否对cookies进行签名，一般用true</span></span><br><span class="line">    <span class="attr">rolling</span>: <span class="literal">false</span>, <span class="comment">// 是否每次请求的时候都强行设置cookies，刷新cookies的初始化时间</span></span><br><span class="line">    <span class="attr">renew</span>: <span class="literal">true</span>, <span class="comment">// 是否蛾子即将过期是刷新cookies</span></span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Session</span>(config, app));</span><br><span class="line"><span class="comment">// 配置middleware完成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在/login页面设置一个session键值对</span></span><br><span class="line">    ctx.<span class="property">session</span>.<span class="property">user</span> = <span class="string">&#x27;yuki&#x27;</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;Login&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_">async</span>(ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">//获取并打印session内容</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`Hi, <span class="subst">$&#123;ctx.session.user&#125;</span>`</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">    .<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">4200</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>记录使用hexo搭建个人博客</title>
    <url>/blog/2019/10/31/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文仅是对自己使用hexo+next搭建博客的一些步骤和遇到的一些“坑”，整个搭建过程几乎都是参考了崔大大（公众号：进击的Coder）的<a href="https://mp.weixin.qq.com/s/qWMsCUjbmD1tocNEt23qVw">利用 GitHub 从零开始搭建一个博客</a>这篇文章，有兴趣的同学可以关注崔大的公众号进行阅读。本文对Node.js的安装，Git安装与环境变量的配置与Gitee账号申请等步骤不作叙述。</p>
<hr>
<span id="more"></span>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>系统：Win 10</li>
<li>Git版本：</li>
<li>Node.js版本：v12.13.0</li>
<li>Hexo版本： v4.0.0 </li>
<li>NexTv版本：7.4.2 </li>
<li>部署位置：GItee</li>
</ul>
<hr>
<h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><h4 id="更改npm镜像源，使用cnpm"><a href="#更改npm镜像源，使用cnpm" class="headerlink" title="更改npm镜像源，使用cnpm"></a>更改npm镜像源，使用cnpm</h4><p>嘛….使用淘宝镜像主要的原因是晚上家里的网络使用npm下载的时候真的慢到令人发指….</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装成功后可以使用cnpm代替npm啦~</p>
<h4 id="全局安装Hexo框架"><a href="#全局安装Hexo框架" class="headerlink" title="全局安装Hexo框架"></a>全局安装Hexo框架</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cnpm i <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>



<h4 id="在目标文件夹下初始化一个Hexo项目（这里就假定我们的项目名称叫blog）"><a href="#在目标文件夹下初始化一个Hexo项目（这里就假定我们的项目名称叫blog）" class="headerlink" title="在目标文件夹下初始化一个Hexo项目（这里就假定我们的项目名称叫blog）"></a>在目标文件夹下初始化一个Hexo项目（这里就假定我们的项目名称叫blog）</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>这里有个很蛋疼的情况，就是hexo默认是使用npm安装依赖的，所以碰到网速不好的时候可以在使用hexo把基本框架搭建起来后，手动使用cnpm安装依赖包</p>
<h4 id="将-Hexo-编译生成-HTML-代码"><a href="#将-Hexo-编译生成-HTML-代码" class="headerlink" title="将 Hexo 编译生成 HTML 代码"></a>将 Hexo 编译生成 HTML 代码</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>至此博客的基本框架就搭好了，可以使用<code>hexo s</code>启动本地服务，通过访问<code>http://localhost:4000</code>来访问生产的博客了</p>
<h4 id="部署到Gitee"><a href="#部署到Gitee" class="headerlink" title="部署到Gitee"></a>部署到Gitee</h4><p>为啥选择了Gitee而木有选择大名鼎鼎的Github呢，其实就是想选个服务器在国内的….访问速度比较快，其实Gitee也就是Github的汉化版啦…..不用太纠结</p>
<ol>
<li><p>创建一个Repository，并配置好仓库地址啥的</p>
</li>
<li><p>修改我们本地项目的根目录下的<code>_config.yml</code>（吐槽一下这个跟<code>xml</code>是啥关系….）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site （这些是博客主页的一些静态显示内容，开心就好....）</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&lt;你的博客的名字&gt;</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&lt;你的博客的副标题&gt;</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">&lt;作者&gt;</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 这个位置很重要，请千万要记得配置，之前没有作配置导致css和js木有被正确识别，不知道是不是只有Gitee有这个问题，崔大的文章中使用的Github没有提这个</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&lt;仓库地址，如https://gitee.com/xxxxx/blog/&gt;</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">&lt;仓库地址的根目录，如/blog&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;仓库地址+.git，如https://gitee.com/xxxxx/blog.git&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装hexo的一个部署插件hexo-deployer-git</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cnpm i hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录一个一键部署的脚本，<code>deploy.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行部署脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure>

<p>若本计算机是第一次与Gitee进行连接的时候是需要提交用户名和密码的（如果配置了ssh就不用，但是我懒….），以后就可以被Gitee记住直连啦</p>
</li>
<li><p>部署完成后，进入项目仓库，点击Service –&gt; Gitee Pages –&gt; Create即可完成部署，部署完成后可以根据部署页面的提示的url进入你的博客查看部署效果啦~</p>
</li>
</ol>
<h4 id="修改主题与样式"><a href="#修改主题与样式" class="headerlink" title="修改主题与样式"></a>修改主题与样式</h4><p>觉得自带的样式不太喜欢….就可以更换一下自己喜欢的主题，本文还是使用崔大推荐的Next，熊猫风格很赞的说</p>
<ol>
<li><p>安装Next主题到项目文件夹theme中：</p>
<p>在项目的根目录右键选择Git Bash，打开后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>


</li>
<li><p>修改根目录下的<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>修改<code>theme\next</code>下的<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>上班修bug困了….明天接着填….</p>
</li>
</ol>
]]></content>
      <categories>
        <category>个人博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>部署局域网FTP</title>
    <url>/blog/2019/10/30/%E9%83%A8%E7%BD%B2%E5%B1%80%E5%9F%9F%E7%BD%91FTP/</url>
    <content><![CDATA[<ol>
<li><p><code>控制面板 -&gt; 程序 -&gt; 启用或关闭windows功能</code></p>
</li>
<li><p>在<code>Internet information Services</code>中，勾选<code>FTP服务器</code>中的<code>FTP服务</code>，与<code>Web管理工具</code>中的<code>IIS管理控制台</code>，然后点击确定进行安装和配置，等待配置完成</p>
</li>
<li><p>打开<code>IIS管理器</code>，在<code>网站</code>中<code>添加FTP站点</code>，命名站点名称与设置内容目录</p>
</li>
<li><p>IP地址若为<code>全部未分配</code>，则使用时使用本机的ip即可</p>
</li>
<li><p>在SSL中勾选<code>无SSL</code></p>
<span id="more"></span></li>
<li><p>身份验证使用<code>基本</code>,选择授权用户，以及用户权限，然后点击完成</p>
</li>
<li><p><code>防火墙与网络保护 -&gt; 高级设置</code></p>
</li>
</ol>
<blockquote>
<ul>
<li>入站规则：启动FTP相关的入站规则</li>
<li>出站规则：启动FTP相关的出站规则</li>
</ul>
</blockquote>
<ol start="8">
<li><p>保存配置后，重启计算机</p>
</li>
<li><p>在另外一台计算机中的资源管理器中访问<code>ftp://&#123;&#123; 配置了ftp的计算机的ip地址 &#125;&#125;</code>，输入用户名与密码即可访问</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建HADOOP完全分布式</title>
    <url>/blog/2019/10/30/%E9%85%8D%E7%BD%AEHADOOP%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="配置环境说明"><a href="#配置环境说明" class="headerlink" title="配置环境说明"></a>配置环境说明</h2><p>   win10下使用vmware-workstation15 搭建 centOS 7 虚拟环境</p>
<p>   JDK版本：8u144</p>
<p>   Hadoop版本：2.8.4</p>
<p>   集群节点数：3</p>
<span id="more"></span>    

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li><p>在网络适配器中，将VMnet8的ip锁定为192.168.1.1</p>
</li>
<li><p>在vmvare-workstation中的Edit -&gt; Vitural Network Editor中将VMnet8的Subnet ip锁定为192.168.1.0</p>
</li>
<li><p>使用vmvare新建一台虚拟机，配置为4G+30G，安装CentOS 7 (本次安装Minimal Version)</p>
</li>
</ol>
<h2 id="配置主节点"><a href="#配置主节点" class="headerlink" title="配置主节点"></a>配置主节点</h2><h3 id="修改centOS中的配置文件"><a href="#修改centOS中的配置文件" class="headerlink" title="修改centOS中的配置文件"></a>修改centOS中的配置文件</h3><ol>
<li><code>/etc/sysconfig/network-scripts/ifcfg-eno16777736</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot;	# 将虚拟机的地址获取改为静态</span><br><span class="line">ONBOOT=&quot;yes&quot;		# </span><br><span class="line">IPADDR=192.168.1.111	# 前三段与VMnet8的ip中的第三段保持一致，第四段为自定义</span><br><span class="line">GATEWAY=192.168.1.2		# 与VMnet8的gateway保持一致</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>/etc/resolv.conf</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8	# 与上面的DNS1保持一致</span><br></pre></td></tr></table></figure>

<ul>
<li>配置完后重启一下网络服务：<code>service network restart</code></li>
<li>检查重启之后虚拟机地址是否生效：<code>ip addr</code></li>
<li>检查网关是否能ping通：<code>ping 192.168.1.2</code></li>
<li>检查虚拟机是否能连接互联网：<code>ping im.qq.com</code></li>
</ul>
<ol start="3">
<li>关闭与禁用防火墙：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p>关闭Selinux，将<code>/etc/selinux/config</code>该文件中的<code>SELINUX=enforcing</code>改为<code>SELINUX=disabled</code></p>
<ol start="4">
<li>Hosts配置<code>/etc/hosts</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.1.111 bigdata111</span><br><span class="line">192.168.1.112 bigdata112</span><br><span class="line">192.168.1.113 bigdata113</span><br></pre></td></tr></table></figure>

<ul>
<li>查看本机主机名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>配置免密登录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa		# 然后一直回车知道执行结束</span><br><span class="line">ssh-copy-id bigdata111	# 提示是否继续连接选yes，提示输入用户密码</span><br></pre></td></tr></table></figure>

<ul>
<li>测试免密是否配置成功<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh bigdata111</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><ol>
<li><p>使用<code>lrzsz</code>上传JDK压缩包</p>
</li>
<li><p>解压至指定目录（ 本次目录为<code>/opt/module/</code> ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压完成后，配置环境变量<code>vi /etc/profile</code></p>
</li>
</ol>
<figure class="highlight profile"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>刷新配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装HADOOP"><a href="#安装HADOOP" class="headerlink" title="安装HADOOP"></a>安装HADOOP</h3><ol>
<li><p>使用<code>lrzsz</code>上传Hadoop2.8.4的压缩包</p>
</li>
<li><p>解压至指定目录（本次目录为<code>/opt/module/</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量<code>vi /etc/profile</code></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/opt/module/hadoop-2.8.4</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>刷新配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="修改HADOOP配置文件"><a href="#修改HADOOP配置文件" class="headerlink" title="修改HADOOP配置文件"></a>修改HADOOP配置文件</h3><p>首先在<code>/opt/module/hadoop-2.8.4</code>下创建<code>data</code>和<code>logs</code>两个目录</p>
<ol>
<li><code>core-site.xml</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://bigdata111:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.8.4/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>hdfs-site.xml</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据冗余数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--secondary的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata111:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--关闭权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>yarn-site.xml</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天(秒) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>mapred-site.xml</code></li>
</ol>
<p>首先<code>mv mapred-site.xml.template mapred-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定mr运行在yarn上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--历史服务器的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata111:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--历史服务器页面的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata111:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><code>hadoop-env.sh</code>, <code>mapred-env.sh</code>, <code>yarn-env.sh</code>三个脚本文件追加JDK安装路径的变量</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>配置<code>slaves</code><br>清空原内容后写入以下内容</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bigdata111</span><br><span class="line">bigdata112</span><br><span class="line">bigdata113</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>执行格式初始化<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置从节点"><a href="#配置从节点" class="headerlink" title="配置从节点"></a>配置从节点</h2><ol>
<li><p>关闭虚拟机<code>bigdata111</code>，克隆<code>bigdata111</code>两次，分别命名为<code>bigdata112</code>, <code>bigdata113</code></p>
</li>
<li><p>修改<code>bigdata112</code>, <code>bigdata113</code>的主机名</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname bigdata112</span><br><span class="line">hostnamectl set-hostname bigdata113</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改<code>bigdata112</code>, <code>bigdata113</code>的静态ip</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eno16777736</span><br><span class="line">IPADDR=192.168.1.112</span><br></pre></td></tr></table></figure>

<p>重启服务 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>配置免密登录</li>
</ol>
<ul>
<li>在搭建主节点的时候已经对进行过配置，此时我们仅需在在首次跳转的时候输入<code>yes</code>即可完成三台虚拟机的免密登陆配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh bigdata112</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>清空三个节点中<code>/opt/module/hadoop-2.8.4</code>下的<code>data</code>和<code>logs</code>里面的所有内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf data/* logs/*</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新初始化主节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="启动HADOOP完全分布式"><a href="#启动HADOOP完全分布式" class="headerlink" title="启动HADOOP完全分布式"></a>启动HADOOP完全分布式</h2><ol>
<li>在主节点的虚拟机中执行：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在本地的浏览器中访问管理页面：<code>http://192.168.1.111:50070</code></p>
</li>
<li><p>修改<code>C:\Windows\System32\drivers\etc\hosts</code></p>
</li>
</ol>
<ul>
<li>追加</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.1.111 bigdata111</span><br><span class="line">192.168.1.112 bigdata112</span><br><span class="line">192.168.1.113 bigdata113</span><br></pre></td></tr></table></figure>

<p>之后便可使用<code>http://bigdata111:50070</code>访问管理页面</p>
]]></content>
      <categories>
        <category>大数据离线开发</category>
      </categories>
      <tags>
        <tag>HADOOP</tag>
      </tags>
  </entry>
  <entry>
    <title>首次将本地代码上传至GitHub空仓</title>
    <url>/blog/2020/12/16/%E9%A6%96%E6%AC%A1%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E8%87%B3GitHub%E7%A9%BA%E4%BB%93/</url>
    <content><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>已安装好git</li>
<li>Github账号</li>
<li>已配置好SSH<span id="more"></span></li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>在目标文件夹根目录初始化git仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>


</li>
<li><p>配置<code>.gitignore</code></p>
<p>在根目录中添加<code>.gitignore</code>，将不需要上传的文件或文件夹路径写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dist</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure>


</li>
<li><p>将所有需要上传的文件提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure>


</li>
<li><p>加上本次提交所填写的备注</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>切换至main分支</p>
<p>Github的默认分支为main分支，所以我们要切换为main分支上传</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure>


</li>
<li><p>添加远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:&lt;your github account&gt;/&lt;your repository name&gt;.git</span><br></pre></td></tr></table></figure>


</li>
<li><p>推送至远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>


</li>
<li><p>到GitHub仓库中查看是否推送成功</p>
</li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
